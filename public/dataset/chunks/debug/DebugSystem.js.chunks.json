[
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 0,
    "method": "imports",
    "chunk_text": "import { GameEvents } from '../managers/core/EventManager';\nimport { GameConfig } from '../config/GameConfig';",
    "metadata": {
      "start_line": 1,
      "end_line": 2,
      "notes": "Core imports for debug system including event system and game configuration",
      "imports": [
        "GameEvents",
        "GameConfig"
      ],
      "tags": [
        "imports",
        "core_system",
        "debug",
        "configuration"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 1, "method": "class_definition"},
        {"file_name": "DebugSystem.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 1,
    "method": "class_definition",
    "chunk_text": "/**\n * @file\n * This file exports the DebugSystem class which provides debugging utilities and tools\n * for development and testing. It handles debug overlays, performance monitoring, and\n * state inspection.\n *\n * @module debug\n */\n\n/**\n * Debug system for development and testing\n * \n * @class DebugSystem\n * @description\n * Provides debugging tools and utilities including:\n * - FPS counter and performance metrics\n * - State inspection and modification\n * - Debug overlay rendering\n * - Event logging and monitoring\n * \n * @see GameConfig Configuration settings\n * @see GameEvents Event system integration\n */\nexport class DebugSystem {",
    "metadata": {
      "start_line": 4,
      "end_line": 26,
      "notes": "Class definition for DebugSystem with comprehensive documentation of debugging capabilities",
      "imports": [],
      "tags": [
        "class_definition",
        "core_system",
        "debug",
        "documentation"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 0, "method": "imports"},
        {"file_name": "DebugSystem.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 2,
    "method": "constructor",
    "chunk_text": "    /**\n     * Initialize debug system\n     * \n     * @param {Phaser.Scene} scene - The scene this debug system belongs to\n     * \n     * @description\n     * Setup process:\n     * 1. Store scene reference\n     * 2. Initialize debug state\n     * 3. Setup event listeners\n     * 4. Create debug overlay if enabled\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.isEnabled = GameConfig.DEBUG_MODE;\n        this.debugGraphics = null;\n        \n        if (this.isEnabled) {\n            this.setupDebugMode();\n        }\n    }",
    "metadata": {
      "start_line": 28,
      "end_line": 47,
      "notes": "Constructor implementation for DebugSystem, handling initialization and debug mode setup",
      "imports": [
        "GameConfig"
      ],
      "tags": [
        "constructor",
        "initialization",
        "debug",
        "configuration"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 1, "method": "class_definition"},
        {"file_name": "DebugSystem.js", "chunk_index": 3, "method": "setupDebugMode"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 3,
    "method": "setupDebugMode",
    "chunk_text": "    /**\n     * Setup debug mode configuration and tools\n     * \n     * @private\n     * @description\n     * Setup process:\n     * 1. Create debug graphics layer\n     * 2. Initialize FPS counter\n     * 3. Setup keyboard shortcuts\n     * 4. Configure debug event listeners\n     * \n     * @returns {void}\n     */\n    setupDebugMode() {\n        this.debugGraphics = this.scene.add.graphics();\n        this.setupKeyboardShortcuts();\n        this.setupEventListeners();\n        \n        // Initialize FPS display if enabled\n        if (GameConfig.SHOW_FPS) {\n            this.setupFPSCounter();\n        }\n    }",
    "metadata": {
      "start_line": 49,
      "end_line": 71,
      "notes": "Sets up debug mode functionality including graphics, shortcuts, and FPS counter",
      "imports": [
        "GameConfig"
      ],
      "tags": [
        "initialization",
        "debug",
        "configuration",
        "setup"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 2, "method": "constructor"},
        {"file_name": "DebugSystem.js", "chunk_index": 4, "method": "drawPhysicsBounds"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 4,
    "method": "drawPhysicsBounds",
    "chunk_text": "    /**\n     * Draw debug visualization for physics body boundaries\n     * \n     * @param {Phaser.GameObjects.GameObject} gameObject - The game object to visualize\n     * \n     * @description\n     * Visualization process:\n     * 1. Checks if debug is enabled and object is valid\n     * 2. Gets physics body dimensions\n     * 3. Draws green outline around physics bounds\n     * \n     * @returns {void}\n     */\n    drawPhysicsBounds(gameObject) {\n        if (!this.isEnabled || !gameObject || !gameObject.body) return;\n\n        const x = gameObject.body.x;\n        const y = gameObject.body.y;\n        const width = gameObject.body.width;\n        const height = gameObject.body.height;\n\n        this.debugGraphics.lineStyle(1, 0x00ff00);\n        this.debugGraphics.strokeRect(x, y, width, height);\n    }",
    "metadata": {
      "start_line": 73,
      "end_line": 93,
      "notes": "Draws debug visualization for physics body boundaries with green outline",
      "imports": [],
      "tags": [
        "debug",
        "physics",
        "visualization",
        "collision",
        "utility"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 3, "method": "setupDebugMode"},
        {"file_name": "DebugSystem.js", "chunk_index": 5, "method": "drawDroneDebug"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 5,
    "method": "drawDroneDebug",
    "chunk_text": "    /**\n     * Draw debug visualization for drone enemies\n     * \n     * @param {Object} drone - The drone enemy instance to visualize\n     * \n     * @description\n     * Visualization includes:\n     * 1. Laser range indicator\n     * 2. Patrol path visualization\n     * 3. Current state indicators\n     * 4. Position markers\n     * \n     * @returns {void}\n     */\n    drawDroneDebug(drone) {\n        if (!this.isEnabled) return;\n\n        const sprite = drone.sprite || drone;\n        if (!sprite || !sprite.active) return;\n\n        // Draw laser range\n        this.debugGraphics.lineStyle(1, 0xff0000, 0.3);\n        this.debugGraphics.strokeCircle(sprite.x, sprite.y, drone.laserRange || 500);\n\n        // Draw patrol path and points\n        if (drone.patrolPoints) {\n            this.debugGraphics.lineStyle(2, 0x00ff00, 0.5);\n            for (let i = 0; i < drone.patrolPoints.length; i++) {\n                const startPoint = drone.patrolPoints[i];\n                const endPoint = drone.patrolPoints[(i + 1) % drone.patrolPoints.length];\n                \n                this.debugGraphics.beginPath();\n                this.debugGraphics.moveTo(startPoint.x, startPoint.y);\n                this.debugGraphics.lineTo(endPoint.x, endPoint.y);\n                this.debugGraphics.strokePath();\n                \n                this.debugGraphics.fillStyle(0xff0000, 1);\n                this.debugGraphics.fillCircle(startPoint.x, startPoint.y, 5);\n            }\n        }\n    }",
    "metadata": {
      "start_line": 95,
      "end_line": 135,
      "notes": "Handles debug visualization for drone enemies including patrol paths and attack ranges",
      "imports": [],
      "tags": [
        "debug",
        "visualization",
        "enemy",
        "drone",
        "patrol"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 4, "method": "drawPhysicsBounds"},
        {"file_name": "DebugSystem.js", "chunk_index": 6, "method": "drawWarriorDebug"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 6,
    "method": "drawWarriorDebug",
    "chunk_text": "    /**\n     * Draw debug visualization for warrior enemies\n     * \n     * @param {Phaser.GameObjects.Sprite} sprite - The warrior enemy's sprite\n     * \n     * @description\n     * Visualization includes:\n     * 1. Physics body boundaries\n     * 2. Detection and attack ranges\n     * 3. Movement direction indicators\n     * \n     * @returns {void}\n     */\n    drawWarriorDebug(sprite) {\n        if (!this.isEnabled || !sprite) return;\n\n        const warrior = sprite.getData('enemy');\n        if (!warrior) return;\n\n        // Draw physics bounds\n        this.drawPhysicsBounds(sprite);\n\n        // Draw detection and attack ranges\n        this.debugGraphics.lineStyle(1, 0xff6600, 0.3);\n        this.debugGraphics.strokeCircle(sprite.x, sprite.y, warrior.detectionRange || 300);\n\n        this.debugGraphics.lineStyle(1, 0xff0000, 0.3);\n        this.debugGraphics.strokeCircle(sprite.x, sprite.y, warrior.attackRange || 50);\n\n        // Draw movement direction\n        const directionLength = 30;\n        this.debugGraphics.lineStyle(2, 0xffff00);\n        this.debugGraphics.lineBetween(\n            sprite.x,\n            sprite.y,\n            sprite.x + (sprite.flipX ? -directionLength : directionLength),\n            sprite.y\n        );\n    }",
    "metadata": {
      "start_line": 137,
      "end_line": 165,
      "notes": "Handles debug visualization for warrior enemies including combat ranges and movement",
      "imports": [],
      "tags": [
        "debug",
        "visualization",
        "enemy",
        "warrior",
        "combat"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 5, "method": "drawDroneDebug"},
        {"file_name": "DebugSystem.js", "chunk_index": 7, "method": "drawPlayerDebug"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 7,
    "method": "drawPlayerDebug",
    "chunk_text": "    /**\n     * Draw debug visualization for the player character\n     * \n     * @param {Object} player - The player character instance\n     * \n     * @description\n     * Visualization includes:\n     * 1. Player bounds\n     * 2. Jump range indicator\n     * 3. Damage and invulnerability status\n     * 4. Movement direction\n     * \n     * @returns {void}\n     */\n    drawPlayerDebug(player) {\n        if (!this.isEnabled || !player) return;\n\n        // Draw player bounds\n        this.debugGraphics.lineStyle(2, 0x00ff00);\n        this.debugGraphics.strokeRect(player.x - player.width/2, player.y - player.height/2, player.width, player.height);\n\n        // Draw jump range\n        if (player.jumpsAvailable > 0) {\n            this.debugGraphics.lineStyle(1, 0x00ff00, 0.3);\n            this.debugGraphics.strokeCircle(player.x, player.y, Math.abs(player.jumpSpeed) / 10);\n        }\n\n        // Draw damage indicator\n        if (player.lastDamageTaken > 0 && Date.now() < player.invulnerableUntil) {\n            this.debugGraphics.lineStyle(2, 0xff0000, 0.5);\n            this.debugGraphics.strokeCircle(player.x, player.y, 30);\n        }\n\n        // Draw movement direction\n        const direction = player.body.velocity.x !== 0 ? Math.sign(player.body.velocity.x) : (player.flipX ? -1 : 1);\n        const directionLength = 30;\n        this.debugGraphics.lineStyle(2, 0xffff00);\n        this.debugGraphics.lineBetween(\n            player.x,\n            player.y,\n            player.x + (direction * directionLength),\n            player.y\n        );\n    }",
    "metadata": {
      "start_line": 167,
      "end_line": 195,
      "notes": "Handles debug visualization for player character including movement and status indicators",
      "imports": [],
      "tags": [
        "debug",
        "visualization",
        "player",
        "movement",
        "status"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 6, "method": "drawWarriorDebug"},
        {"file_name": "DebugSystem.js", "chunk_index": 8, "method": "update"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 8,
    "method": "update",
    "chunk_text": "    /**\n     * Update debug visualization state\n     * \n     * @param {number} time - Current game time\n     * \n     * @description\n     * Update process:\n     * 1. Clear previous frame graphics\n     * 2. Clear debug text objects\n     * 3. Draw platform bounds\n     * 4. Update entity debug info\n     * \n     * @returns {void}\n     */\n    update(time) {\n        // Clear previous frame's debug graphics\n        this.debugGraphics.clear();\n        \n        // Clear previous debug texts\n        if (this.debugTexts) {\n            this.debugTexts.forEach(text => text.destroy());\n            this.debugTexts = [];\n        }\n\n        if (!this.isEnabled) return;\n\n        // Draw platform bounds\n        if (this.scene.platforms && this.scene.platforms.children) {\n            this.scene.platforms.children.entries.forEach(platform => {\n                if (platform && platform.active) {\n                    this.drawPlatformBounds(platform);\n                }\n            });\n        }\n\n        // Draw player and enemy debug info\n        if (this.scene.player) {\n            this.drawPlayerDebug(this.scene.player);\n        }\n\n        if (this.scene.enemies) {\n            this.scene.enemies.getChildren().forEach(enemySprite => {\n                if (enemySprite && enemySprite.active) {\n                    if (enemySprite.getData('type') === 'warrior') {\n                        this.drawWarriorDebug(enemySprite);\n                    } else if (enemySprite.getData('type') === 'drone') {\n                        this.drawDroneDebug(enemySprite);\n                    }\n                }\n            });\n        }\n    }",
    "metadata": {
      "start_line": 197,
      "end_line": 233,
      "notes": "Main update loop for debug visualization system, handling graphics clearing and entity updates",
      "imports": [],
      "tags": [
        "debug",
        "update",
        "visualization",
        "core_system",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 7, "method": "drawPlayerDebug"},
        {"file_name": "DebugSystem.js", "chunk_index": 9, "method": "cleanup"}
      ]
    }
  },
  {
    "file_name": "DebugSystem.js",
    "chunk_index": 9,
    "method": "cleanup",
    "chunk_text": "    /**\n     * Clean up debug system resources\n     * \n     * @description\n     * Cleanup process:\n     * 1. Destroy debug graphics\n     * 2. Clear debug texts\n     * 3. Reset internal state\n     * \n     * @returns {void}\n     */\n    cleanup() {\n        if (this.debugGraphics) {\n            this.debugGraphics.destroy();\n        }\n        if (this.debugTexts) {\n            this.debugTexts.forEach(text => text.destroy());\n            this.debugTexts = [];\n        }\n    }",
    "metadata": {
      "start_line": 235,
      "end_line": 243,
      "notes": "Handles cleanup of debug system resources to prevent memory leaks",
      "imports": [],
      "tags": [
        "debug",
        "cleanup",
        "resource_management",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "DebugSystem.js", "chunk_index": 8, "method": "update"}
      ]
    }
  }
]
