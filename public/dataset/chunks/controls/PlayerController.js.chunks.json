[
  {
    "file_name": "PlayerController.js",
    "chunk_index": 0,
    "method": "file_header",
    "chunk_text": "/**\n * Player Input Controller\n * Handles keyboard and mouse input for player actions\n * Supports key rebinding and persistent control settings\n */\nimport Phaser from 'phaser';",
    "metadata": {
      "start_line": 1,
      "end_line": 6,
      "notes": "File header documentation and imports",
      "imports": ["phaser"]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 1,
    "method": "constructor",
    "chunk_text": "/**\n     * Initialize player controls with default or saved key bindings\n     * @param {Phaser.Scene} scene - The game scene this controller belongs to\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.enabled = true;  // Control state flag\n        \n        // Default key mapping configuration\n        this.defaultBindings = {\n            up: Phaser.Input.Keyboard.KeyCodes.W,\n            down: Phaser.Input.Keyboard.KeyCodes.S,\n            left: Phaser.Input.Keyboard.KeyCodes.A,\n            right: Phaser.Input.Keyboard.KeyCodes.D,\n            jump: Phaser.Input.Keyboard.KeyCodes.SPACE,\n            specialAttack: Phaser.Input.Keyboard.KeyCodes.Q,\n            shoot: 'MOUSE_LEFT',\n            shift: Phaser.Input.Keyboard.KeyCodes.SHIFT\n        };\n        \n        // Initialize controls from saved settings or defaults\n        this.keyBindings = this.loadKeyBindings();\n        this.controls = this.createControls();\n    }",
    "metadata": {
      "start_line": 12,
      "end_line": 33,
      "notes": "Constructor initializing player controls with default or saved key bindings",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 2,
    "method": "createControls",
    "chunk_text": "/**\n     * Create control objects for each action\n     * Handles both keyboard and mouse inputs\n     * @private\n     */\n    createControls() {\n        const controls = {};\n        for (const [action, key] of Object.entries(this.keyBindings)) {\n            if (typeof key === 'string' && key.startsWith('MOUSE_')) {\n                // Create mouse button handlers\n                controls[action] = {\n                    isDown: () => {\n                        if (!this.enabled) return false;\n                        switch (key) {\n                            case 'MOUSE_LEFT': return this.scene.input.activePointer.leftButtonDown();\n                            case 'MOUSE_RIGHT': return this.scene.input.activePointer.rightButtonDown();\n                            case 'MOUSE_MIDDLE': return this.scene.input.activePointer.middleButtonDown();\n                            default: return false;\n                        }\n                    }\n                };\n            } else {\n                // Create keyboard key handlers\n                controls[action] = this.scene.input.keyboard.addKey(key);\n            }\n        }\n        return controls;\n    }",
    "metadata": {
      "start_line": 35,
      "end_line": 61,
      "notes": "Creates control objects for keyboard and mouse inputs",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 3,
    "method": "loadKeyBindings",
    "chunk_text": "/**\n     * Load saved key bindings from localStorage\n     * @returns {Object} Key bindings configuration\n     * @private\n     */\n    loadKeyBindings() {\n        const savedBindings = localStorage.getItem('keyBindings');\n        return savedBindings ? JSON.parse(savedBindings) : {...this.defaultBindings};\n    }",
    "metadata": {
      "start_line": 63,
      "end_line": 71,
      "notes": "Loads saved key bindings from localStorage",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 4,
    "method": "saveKeyBindings",
    "chunk_text": "/**\n     * Save current key bindings to localStorage\n     * @private\n     */\n    saveKeyBindings() {\n        localStorage.setItem('keyBindings', JSON.stringify(this.keyBindings));\n    }",
    "metadata": {
      "start_line": 73,
      "end_line": 79,
      "notes": "Saves current key bindings to localStorage",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 5,
    "method": "changeKeyBinding",
    "chunk_text": "/**\n     * Change key binding for a specific action\n     * @param {string} action - Action to rebind\n     * @param {KeyboardEvent} event - Key event containing new binding\n     */\n    changeKeyBinding(action, event) {\n        let keyCode;\n        \n        // Map special keys to Phaser key codes\n        switch(event.key) {\n            case 'ArrowUp': keyCode = Phaser.Input.Keyboard.KeyCodes.UP; break;\n            case 'ArrowDown': keyCode = Phaser.Input.Keyboard.KeyCodes.DOWN; break;\n            case 'ArrowLeft': keyCode = Phaser.Input.Keyboard.KeyCodes.LEFT; break;\n            case 'ArrowRight': keyCode = Phaser.Input.Keyboard.KeyCodes.RIGHT; break;\n            default: keyCode = event.keyCode;\n        }\n\n        // Update binding and recreate control\n        this.keyBindings[action] = keyCode;\n        if (this.controls[action]) {\n            this.controls[action].destroy();\n        }\n        this.controls[action] = this.scene.input.keyboard.addKey(keyCode);\n        this.saveKeyBindings();\n    }",
    "metadata": {
      "start_line": 81,
      "end_line": 104,
      "notes": "Changes key binding for a specific action and saves the changes",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 6,
    "method": "getKeyName",
    "chunk_text": "/**\n     * Get display name for a key code\n     * @param {(number|string)} keyCode - Key code or mouse button identifier\n     * @returns {string} Human-readable key name\n     */\n    getKeyName(keyCode) {\n        // Handle mouse button names\n        if (typeof keyCode === 'string' && keyCode.startsWith('MOUSE_')) {\n            switch (keyCode) {\n                case 'MOUSE_LEFT': return 'LMB';\n                case 'MOUSE_RIGHT': return 'RMB';\n                case 'MOUSE_MIDDLE': return 'MMB';\n                default: return keyCode.replace('MOUSE_', '');\n            }\n        }\n\n        // Map key codes to display names\n        const keyMap = {\n            // Letters\n            65: 'A', 66: 'B', 67: 'C', 68: 'D', 69: 'E', 70: 'F', 71: 'G', 72: 'H',\n            73: 'I', 74: 'J', 75: 'K', 76: 'L', 77: 'M', 78: 'N', 79: 'O', 80: 'P',\n            81: 'Q', 82: 'R', 83: 'S', 84: 'T', 85: 'U', 86: 'V', 87: 'W', 88: 'X',\n            89: 'Y', 90: 'Z',\n            \n            // Numbers\n            48: '0', 49: '1', 50: '2', 51: '3', 52: '4',\n            53: '5', 54: '6', 55: '7', 56: '8', 57: '9',\n            \n            // Special Keys\n            [Phaser.Input.Keyboard.KeyCodes.UP]: '↑',\n            [Phaser.Input.Keyboard.KeyCodes.DOWN]: '↓',\n            [Phaser.Input.Keyboard.KeyCodes.LEFT]: '←',\n            [Phaser.Input.Keyboard.KeyCodes.RIGHT]: '→',\n            [Phaser.Input.Keyboard.KeyCodes.SPACE]: 'SPACE',\n            [Phaser.Input.Keyboard.KeyCodes.SHIFT]: 'SHIFT',\n            [Phaser.Input.Keyboard.KeyCodes.CTRL]: 'CTRL',\n            [Phaser.Input.Keyboard.KeyCodes.ALT]: 'ALT',\n            [Phaser.Input.Keyboard.KeyCodes.TAB]: 'TAB',\n            [Phaser.Input.Keyboard.KeyCodes.ESC]: 'ESC',\n            [Phaser.Input.Keyboard.KeyCodes.ENTER]: 'ENTER',\n            \n            // Numpad\n            96: 'NUM0', 97: 'NUM1', 98: 'NUM2', 99: 'NUM3', 100: 'NUM4',\n            101: 'NUM5', 102: 'NUM6', 103: 'NUM7', 104: 'NUM8', 105: 'NUM9',\n            \n            // Function keys\n            112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5',\n            117: 'F6', 118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10',\n            122: 'F11', 123: 'F12'\n        };\n\n        return keyMap[keyCode] || 'NONE';\n    }",
    "metadata": {
      "start_line": 106,
      "end_line": 156,
      "notes": "Converts key codes to human-readable key names",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 7,
    "method": "setupKeyBindingUI",
    "chunk_text": "/**\n     * Create UI for key binding configuration\n     * Allows players to rebind controls in-game\n     */\n    setupKeyBindingUI() {\n        const actions = Object.keys(this.keyBindings);\n        actions.forEach(action => {\n            const button = document.createElement('button');\n            button.textContent = `Change ${action} key: ${this.getKeyName(this.keyBindings[action])}`;\n            \n            button.addEventListener('click', () => {\n                button.textContent = 'Press any key...';\n                \n                const handleKeyPress = (event) => {\n                    event.preventDefault();\n                    this.changeKeyBinding(action, event);\n                    button.textContent = `Change ${action} key: ${this.getKeyName(this.keyBindings[action])}`;\n                    document.removeEventListener('keydown', handleKeyPress);\n                };\n                \n                document.addEventListener('keydown', handleKeyPress, { once: true });\n            });\n            \n            document.getElementById('keyBindingContainer')?.appendChild(button);\n        });\n    }",
    "metadata": {
      "start_line": 158,
      "end_line": 182,
      "notes": "Creates UI elements for key binding configuration",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 8,
    "method": "resetToDefaults",
    "chunk_text": "/**\n     * Reset all key bindings to defaults\n     */\n    resetToDefaults() {\n        this.keyBindings = { ...this.defaultBindings };\n        this.saveKeyBindings();\n    }",
    "metadata": {
      "start_line": 184,
      "end_line": 190,
      "notes": "Resets all key bindings to their default values",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 9,
    "method": "setupShootingControls",
    "chunk_text": "/**\n     * Set up mouse-based shooting controls\n     * @param {Object} player - Player object to control\n     */\n    setupShootingControls(player) {\n        this.scene.input.on('pointerdown', (pointer) => {\n            if (pointer.leftButtonDown()) {\n                const direction = player.flipX ? 'left' : 'right';\n                player.shoot(direction);\n            }\n        });\n    }",
    "metadata": {
      "start_line": 192,
      "end_line": 203,
      "notes": "Sets up mouse-based shooting controls for the player",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 10,
    "method": "movement_methods",
    "chunk_text": "    // Input state check methods\n    isMovingUp() { return this.enabled && this.controls.up.isDown; }\n    isMovingDown() { return this.enabled && this.controls.down.isDown; }\n    isMovingLeft() { return this.enabled && this.controls.left.isDown; }\n    isMovingRight() { return this.enabled && this.controls.right.isDown; }\n    isSpecialAttacking() { return this.enabled && Phaser.Input.Keyboard.JustDown(this.controls.specialAttack); }\n    isShooting() { return this.enabled && this.controls.shoot.isDown; }\n    isRolling() { return this.controls.shift.isDown && (this.isMovingLeft() || this.isMovingRight()); }",
    "metadata": {
      "start_line": 205,
      "end_line": 212,
      "notes": "Collection of methods for checking player movement and action states",
      "imports": []
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 11,
    "method": "destroy",
    "chunk_text": "/**\n     * Clean up controller resources\n     * Called when removing the controller\n     */\n    destroy() {\n        // Clean up control objects\n        if (this.controls) {\n            Object.values(this.controls).forEach(control => {\n                if (control && typeof control.destroy === 'function') {\n                    control.destroy();\n                }\n            });\n        }\n        \n        // Clear references\n        this.controls = null;\n        this.scene = null;\n        this.enabled = false;\n    }",
    "metadata": {
      "start_line": 214,
      "end_line": 232,
      "notes": "Cleanup method to destroy controller resources",
      "imports": []
    }
  }
]
