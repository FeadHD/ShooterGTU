[
  {
    "file_name": "PlayerController.js",
    "chunk_index": 0,
    "method": "imports",
    "chunk_text": "import { Scene } from 'phaser';\nimport { Player } from '../entities/Player';\nimport { EventEmitter } from 'events';\nimport { InputManager } from '../managers/input/InputManager';",
    "metadata": {
      "start_line": 0,
      "end_line": 3,
      "notes": "Core imports for player control system including Phaser Scene, Player entity, and input management",
      "imports": [
        "phaser.Scene",
        "Player",
        "events.EventEmitter",
        "InputManager"
      ],
      "tags": [
        "imports",
        "player",
        "input",
        "core_system"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 1, "method": "class"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 1,
    "method": "class",
    "chunk_text": "/**\n * Player Controller class for managing player input and movement\n * \n * @class PlayerController\n * @extends EventEmitter\n * \n * @description\n * Handles player input processing and movement control:\n * - Keyboard input for movement\n * - Jump mechanics\n * - Attack controls\n * - Player state management\n */\nexport class PlayerController extends EventEmitter {",
    "metadata": {
      "start_line": 5,
      "end_line": 18,
      "notes": "Player controller class definition extending EventEmitter for input and movement management",
      "imports": [
        "events.EventEmitter"
      ],
      "tags": [
        "class_definition",
        "player",
        "controller",
        "core_system"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 0, "method": "imports"},
        {"file_name": "PlayerController.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 2,
    "method": "constructor",
    "chunk_text": "    /**\n     * Initialize the player controller\n     * \n     * @param {Scene} scene - The scene this controller belongs to\n     * @param {Player} player - The player entity to control\n     * \n     * @description\n     * Setup process:\n     * 1. Initialize scene and player references\n     * 2. Setup input handling\n     * 3. Configure movement parameters\n     * 4. Initialize player state\n     */\n    constructor(scene, player) {\n        super();\n        this.scene = scene;\n        this.player = player;\n        \n        // Movement parameters\n        this.movementSpeed = 160;\n        this.jumpForce = -400;\n        this.dashSpeed = 400;\n        this.dashDuration = 200;\n        \n        // State tracking\n        this.canJump = true;\n        this.isDashing = false;\n        this.dashTimer = null;\n        \n        // Input setup\n        this.cursors = scene.input.keyboard.createCursorKeys();\n        this.setupKeyboardInput();\n    }",
    "metadata": {
      "start_line": 20,
      "end_line": 47,
      "notes": "Constructor initializes player controller with scene reference, movement parameters, and input setup",
      "imports": [
        "phaser.Scene",
        "Player"
      ],
      "tags": [
        "constructor",
        "initialization",
        "player",
        "input"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 1, "method": "class"},
        {"file_name": "PlayerController.js", "chunk_index": 3, "method": "setupKeyboardInput"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 3,
    "method": "setupKeyboardInput",
    "chunk_text": "    /**\n     * Setup keyboard input handlers\n     * \n     * @description\n     * Setup process:\n     * 1. Create key bindings\n     * 2. Setup attack key\n     * 3. Configure dash key\n     * 4. Initialize jump key\n     * \n     * @private\n     */\n    setupKeyboardInput() {\n        // Attack key (Space)\n        this.attackKey = this.scene.input.keyboard.addKey('SPACE');\n        this.attackKey.on('down', () => {\n            this.emit('attack');\n        });\n        \n        // Dash key (Shift)\n        this.dashKey = this.scene.input.keyboard.addKey('SHIFT');\n        this.dashKey.on('down', () => {\n            if (!this.isDashing) {\n                this.startDash();\n            }\n        });\n        \n        // Jump key (Up)\n        this.jumpKey = this.scene.input.keyboard.addKey('UP');\n        this.jumpKey.on('down', () => {\n            if (this.canJump && this.player.body.touching.down) {\n                this.jump();\n            }\n        });\n    }",
    "metadata": {
      "start_line": 49,
      "end_line": 71,
      "notes": "Sets up keyboard input handlers for player actions including attack, dash, and jump",
      "imports": [],
      "tags": [
        "input",
        "keyboard",
        "player",
        "setup"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 2, "method": "constructor"},
        {"file_name": "PlayerController.js", "chunk_index": 4, "method": "update"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 4,
    "method": "update",
    "chunk_text": "    /**\n     * Update player controls and movement state\n     * \n     * @description\n     * Update process:\n     * 1. Process movement input\n     * 2. Handle shooting mechanics\n     * 3. Update animation states\n     * \n     * @returns {void}\n     */\n    update() {\n        if (!this.enabled) return;\n        \n        this.handleMovement();\n        this.handleShooting();\n    }",
    "metadata": {
      "start_line": 73,
      "end_line": 85,
      "notes": "Main update loop for player controller, processing movement and shooting mechanics",
      "imports": [],
      "tags": [
        "player",
        "update",
        "controls",
        "core_system",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 3, "method": "setupKeyboardInput"},
        {"file_name": "PlayerController.js", "chunk_index": 5, "method": "handleMovement"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 5,
    "method": "handleMovement",
    "chunk_text": "    /**\n     * Process player movement based on input\n     * \n     * @private\n     * @description\n     * Movement handling:\n     * 1. Process horizontal movement\n     * 2. Handle jumping mechanics\n     * 3. Update player animations\n     * 4. Apply physics constraints\n     * \n     * @returns {void}\n     */\n    handleMovement() {\n        if (!this.player || !this.player.body) return;\n\n        // Handle horizontal movement\n        if (this.cursors.left.isDown) {\n            this.player.setVelocityX(-this.movementSpeed);\n            this.player.flipX = true;\n        } else if (this.cursors.right.isDown) {\n            this.player.setVelocityX(this.movementSpeed);\n            this.player.flipX = false;\n        } else {\n            this.player.setVelocityX(0);\n        }\n\n        // Handle jumping\n        if (this.cursors.up.isDown && this.canJump && this.player.body.touching.down) {\n            this.player.setVelocityY(this.jumpForce);\n            this.canJump = false;\n            this.scene.time.delayedCall(100, () => { this.canJump = true; });\n        }\n\n        // Handle dashing\n        if (this.dashKey.isDown && !this.isDashing) {\n            this.startDash();\n        }\n    }",
    "metadata": {
      "start_line": 87,
      "end_line": 119,
      "notes": "Handles player movement mechanics including horizontal movement, jumping, and dashing",
      "imports": [],
      "tags": [
        "player",
        "movement",
        "physics",
        "controls",
        "animation"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 4, "method": "update"},
        {"file_name": "PlayerController.js", "chunk_index": 6, "method": "startDash"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 6,
    "method": "startDash",
    "chunk_text": "    /**\n     * Initiate player dash movement\n     * \n     * @private\n     * @description\n     * Dash process:\n     * 1. Set dash state\n     * 2. Apply dash velocity\n     * 3. Setup dash timer\n     * 4. Handle dash completion\n     * \n     * @returns {void}\n     */\n    startDash() {\n        if (!this.player || this.isDashing) return;\n\n        this.isDashing = true;\n        const direction = this.player.flipX ? -1 : 1;\n        this.player.setVelocityX(this.dashSpeed * direction);\n\n        this.dashTimer = this.scene.time.delayedCall(this.dashDuration, () => {\n            this.isDashing = false;\n            this.player.setVelocityX(0);\n        });\n    }",
    "metadata": {
      "start_line": 121,
      "end_line": 141,
      "notes": "Handles player dash mechanic with velocity and timer management",
      "imports": [],
      "tags": [
        "player",
        "movement",
        "dash",
        "physics",
        "controls"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 5, "method": "handleMovement"},
        {"file_name": "PlayerController.js", "chunk_index": 7, "method": "handleShooting"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 7,
    "method": "handleShooting",
    "chunk_text": "    /**\n     * Process player shooting mechanics\n     * \n     * @private\n     * @description\n     * Shooting process:\n     * 1. Check attack input\n     * 2. Create projectile\n     * 3. Apply projectile physics\n     * 4. Handle cooldown\n     * \n     * @returns {void}\n     */\n    handleShooting() {\n        if (!this.player || !this.attackKey.isDown) return;\n\n        this.emit('attack');\n        \n        // Create projectile\n        const projectile = this.scene.add.sprite(\n            this.player.x + (this.player.flipX ? -20 : 20),\n            this.player.y,\n            'bullet'\n        );\n        \n        projectile.setDepth(2);\n        projectile.flipX = this.player.flipX;\n        \n        // Add physics\n        this.scene.physics.add.existing(projectile);\n        projectile.body.setVelocityX(this.player.flipX ? -600 : 600);\n        \n        // Cleanup after 2 seconds\n        this.scene.time.delayedCall(2000, () => {\n            projectile.destroy();\n        });\n    }",
    "metadata": {
      "start_line": 143,
      "end_line": 171,
      "notes": "Handles player shooting mechanics including projectile creation and physics",
      "imports": [],
      "tags": [
        "player",
        "shooting",
        "projectiles",
        "physics",
        "controls"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 6, "method": "startDash"},
        {"file_name": "PlayerController.js", "chunk_index": 8, "method": "cleanup"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 8,
    "method": "cleanup",
    "chunk_text": "    /**\n     * Clean up controller resources\n     * \n     * @description\n     * Cleanup process:\n     * 1. Clear input bindings\n     * 2. Remove event listeners\n     * 3. Reset state flags\n     * \n     * @returns {void}\n     */\n    cleanup() {\n        // Clear input bindings\n        if (this.controls) {\n            Object.values(this.controls).forEach(control => {\n                if (control && typeof control.destroy === 'function') {\n                    control.destroy();\n                }\n            });\n        }\n        \n        // Reset state\n        this.enabled = false;\n        this.canJump = false;\n        this.isDashing = false;\n        \n        if (this.dashTimer) {\n            this.dashTimer.destroy();\n            this.dashTimer = null;\n        }\n    }",
    "metadata": {
      "start_line": 173,
      "end_line": 196,
      "notes": "Handles cleanup of controller resources and state reset",
      "imports": [],
      "tags": [
        "player",
        "cleanup",
        "controls",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 7, "method": "handleShooting"},
        {"file_name": "PlayerController.js", "chunk_index": 9, "method": "resetKeyBindings"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 9,
    "method": "resetKeyBindings",
    "chunk_text": "    /**\n     * Reset key bindings to defaults\n     * \n     * @description\n     * Reset process:\n     * 1. Clear current bindings\n     * 2. Apply default bindings\n     * 3. Recreate control objects\n     * \n     * @returns {void}\n     */\n    resetKeyBindings() {\n        // Clear existing controls\n        this.cleanup();\n        \n        // Reset to defaults\n        this.keyBindings = {...this.defaultBindings};\n        \n        // Recreate controls\n        this.controls = {};\n        this.setupKeyboardInput();\n    }",
    "metadata": {
      "start_line": 198,
      "end_line": 216,
      "notes": "Resets key bindings to default values and recreates control objects",
      "imports": [],
      "tags": [
        "player",
        "input",
        "controls",
        "reset"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 8, "method": "cleanup"},
        {"file_name": "PlayerController.js", "chunk_index": 10, "method": "setEnabled"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 10,
    "method": "setEnabled",
    "chunk_text": "    /**\n     * Enable or disable the controller\n     * \n     * @param {boolean} value - Enable state\n     * \n     * @description\n     * Enable process:\n     * 1. Set enabled state\n     * 2. Reset movement flags\n     * 3. Update input handling\n     * \n     * @returns {void}\n     */\n    setEnabled(value) {\n        this.enabled = value;\n        \n        if (!value) {\n            // Reset movement\n            if (this.player && this.player.body) {\n                this.player.setVelocity(0, 0);\n            }\n            \n            // Reset flags\n            this.canJump = false;\n            this.isDashing = false;\n        } else {\n            // Reset to ready state\n            this.canJump = true;\n        }\n    }",
    "metadata": {
      "start_line": 218,
      "end_line": 243,
      "notes": "Handles enabling/disabling of the controller with proper state management",
      "imports": [],
      "tags": [
        "player",
        "controls",
        "state",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 9, "method": "resetKeyBindings"},
        {"file_name": "PlayerController.js", "chunk_index": 11, "method": "isEnabled"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 11,
    "method": "isEnabled",
    "chunk_text": "    /**\n     * Check if controller is enabled\n     * \n     * @description\n     * Returns the current enabled state of the controller\n     * \n     * @returns {boolean} True if controller is enabled\n     */\n    isEnabled() {\n        return this.enabled;\n    }",
    "metadata": {
      "start_line": 245,
      "end_line": 254,
      "notes": "Returns the current enabled state of the controller",
      "imports": [],
      "tags": [
        "player",
        "controls",
        "state",
        "getter"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 10, "method": "setEnabled"},
        {"file_name": "PlayerController.js", "chunk_index": 12, "method": "destroy"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 12,
    "method": "destroy",
    "chunk_text": "    /**\n     * Destroy the controller and cleanup resources\n     * \n     * @description\n     * Destruction process:\n     * 1. Clean up input bindings\n     * 2. Remove event listeners\n     * 3. Clear references\n     * \n     * @returns {void}\n     */\n    destroy() {\n        this.cleanup();\n        this.player = null;\n        this.scene = null;\n        this.controls = null;\n        this.keyBindings = null;\n    }",
    "metadata": {
      "start_line": 256,
      "end_line": 272,
      "notes": "Final cleanup and destruction of controller instance",
      "imports": [],
      "tags": [
        "player",
        "cleanup",
        "destruction",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 11, "method": "isEnabled"},
        {"file_name": "PlayerController.js", "chunk_index": 13, "method": "getKeyBinding"}
      ]
    }
  },
  {
    "file_name": "PlayerController.js",
    "chunk_index": 13,
    "method": "getKeyBinding",
    "chunk_text": "    /**\n     * Get the current key binding for an action\n     * \n     * @param {string} action - The action to get binding for\n     * \n     * @description\n     * Retrieval process:\n     * 1. Check if action exists\n     * 2. Return current binding\n     * 3. Handle invalid actions\n     * \n     * @returns {(number|string|null)} Key code or null if not found\n     */\n    getKeyBinding(action) {\n        return this.keyBindings[action] || null;\n    }",
    "metadata": {
      "start_line": 274,
      "end_line": 289,
      "notes": "Retrieves the current key binding for a specified action",
      "imports": [],
      "tags": [
        "player",
        "input",
        "controls",
        "getter"
      ],
      "related_chunks": [
        {"file_name": "PlayerController.js", "chunk_index": 12, "method": "destroy"},
        {"file_name": "PlayerController.js", "chunk_index": 14, "method": "setKeyBinding"}
      ]
    }
  }
]
