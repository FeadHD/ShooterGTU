[
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 0,
        "method": "class_definition",
        "chunk_text": "/**\n * Manages LDTK entity creation and management in the game\n * Handles entity instantiation, positioning, and layer organization\n * Integrates with Phaser's scene and physics systems\n */\nexport class LDTKEntityManager {",
        "metadata": {
            "start_line": 1,
            "end_line": 6,
            "notes": "Defines core entity management system for LDtk integration with Phaser game objects and physics",
            "imports": [
                "Phaser.Scene",
                "Phaser.GameObjects.GameObject",
                "Phaser.Physics.Arcade",
                "LDtk"
            ],
            "tags": [
                "class_definition",
                "core_system",
                "entity_management",
                "ldtk",
                "initialization"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 1, "method": "constructor"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 2, "method": "registerEntityFactories"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 1,
        "method": "constructor",
        "chunk_text": "    /**\n     * Creates a new LDTKEntityManager instance\n     * @param {Phaser.Scene} scene - The Phaser scene this manager belongs to\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.assetManager = scene.assetManager;\n        // Track entity instances and their organization\n        this.entityInstances = new Map();  // Maps entity IDs to instances\n        this.entityLayers = new Map();     // Maps layer names to entity sets\n        this.entityFactories = new Map();  // Maps entity types to factory functions\n        this.loadedEntityPositions = new Set(); // Tracks occupied positions\n        this.debug = false;\n        this.debugText = null;\n\n        // Get reference to AssetManager for texture loading\n        this.assetManager = scene.assetManager || {\n            getTextureKeyForEntity: () => ({ spritesheet: 'default_sprite', defaultAnim: null }),\n            getDefaultTexture: () => 'default_sprite',\n        };\n\n        if (!this.assetManager) {\n            console.error('AssetManager is not linked to LDTKEntityManager.');\n        }\n    }",
        "metadata": {
            "start_line": 7,
            "end_line": 30,
            "notes": "Initializes entity manager with scene context, tracking systems, and asset management integration",
            "imports": [
                "Phaser.Scene",
                "Map",
                "Set",
                "../core/AssetManager"
            ],
            "tags": [
                "constructor",
                "initialization",
                "core_system",
                "asset_management",
                "error_handling"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 0, "method": "class_definition"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 2, "method": "registerEntityFactories"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 3, "method": "createEntityInstance"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 2,
        "method": "registerEntityFactories",
        "chunk_text": "    registerEntityFactories(factories) {\n        console.log('Registering entity factories:', Object.keys(factories));\n        Object.entries(factories).forEach(([type, factory]) => {\n            this.entityFactories.set(type, factory);\n            console.log(`Factory registered for type: ${type}`);\n        });\n    }",
        "metadata": {
            "start_line": 31,
            "end_line": 38,
            "notes": "Registers entity factory functions for different entity types with logging",
            "imports": [
                "Map",
                "Object"
            ],
            "tags": [
                "factory_pattern",
                "registration",
                "core_system",
                "initialization",
                "logging"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 1, "method": "constructor"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 3, "method": "createEntityInstance"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 3,
        "method": "createEntityInstance",
        "chunk_text": "    /**\n     * Creates a single entity instance from LDTK entity data\n     * @param {Object} entityData - LDTK entity data\n     * @param {number} worldX - World X offset\n     * @param {number} worldY - World Y offset\n     * @returns {Phaser.GameObjects.GameObject} The created entity instance\n     */\n    createEntityInstance(entityData, worldX = 0, worldY = 0) {\n        const factory = this.entityFactories.get(entityData.__identifier);\n        if (!factory) {\n            console.warn(`No factory found for entity type: ${entityData.__identifier}`);\n            return this.createFallbackEntity(entityData, worldX, worldY);\n        }\n    \n        const x = entityData.px[0] + worldX;\n        const y = entityData.px[1] + worldY;\n        const fields = entityData.fieldInstances || [];\n    \n        const instance = factory(this.scene, x, y, fields);\n    \n        // Add entities to appropriate Phaser groups based on type\n        if (entityData.__identifier === 'Zapper' || entityData.__identifier === 'Enemy') {\n            if (this.scene.enemies) {\n                this.scene.enemies.add(instance);\n            }\n        } else if (entityData.__identifier === 'NeutralObject') {\n            if (this.scene.neutralEntities) {\n                this.scene.neutralEntities.add(instance);\n            }\n        } else if (entityData.__identifier === 'InteractiveObject') {\n            if (this.scene.interactiveEntities) {\n                this.scene.interactiveEntities.add(instance);\n            }\n        }\n    \n        return instance;\n    }",
        "metadata": {
            "start_line": 39,
            "end_line": 73,
            "notes": "Creates and configures game entities using factory pattern with fallback handling and group assignment",
            "imports": [
                "Phaser.GameObjects.GameObject",
                "Phaser.GameObjects.Group",
                "Phaser.Scene",
                "Map"
            ],
            "tags": [
                "entity_creation",
                "factory_pattern",
                "core_system",
                "error_handling",
                "group_management"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 2, "method": "registerEntityFactories"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 9, "method": "createFallbackEntity"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 4, "method": "createEntities"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 4,
        "method": "createEntities",
        "chunk_text": "    createEntities(levelData, worldX = 0, worldY = 0) {\n        console.log('Creating entities for level data:', levelData);\n\n        const layerInstances = levelData.layerInstances || [];\n        const createdEntities = [];\n\n        layerInstances.forEach(layer => {\n            if (layer.__type === \"Entities\") {\n                console.log(`Processing layer: ${layer.__identifier}`);\n\n                // Ensure processing only valid entities in the layer\n                if (layer.entityInstances) {\n                    layer.entityInstances.forEach(entityData => {\n                        const entity = this.createEntityInstance(entityData, worldX, worldY);\n                        if (entity) {\n                            createdEntities.push(entity);\n                        }\n                    });\n                } else {\n                    console.warn(`No entities found in layer ${layer.__identifier}`);\n                }\n            }\n        });\n\n        console.log('Total entities created:', createdEntities.length);\n        return createdEntities;\n    }",
        "metadata": {
            "start_line": 74,
            "end_line": 98,
            "notes": "Processes LDtk level data to create multiple entities with position offsets and logging",
            "imports": [
                "Phaser.GameObjects.GameObject",
                "LDtk.Level",
                "Array"
            ],
            "tags": [
                "batch_creation",
                "level_loading",
                "core_system",
                "error_handling",
                "logging"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 3, "method": "createEntityInstance"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 5, "method": "processEntityLayer"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 5,
        "method": "processEntityLayer",
        "chunk_text": "    /**\n     * Processes a single entity layer, creating and tracking its entities\n     * @param {Object} layer - LDTK layer data\n     * @param {number} worldX - World X offset\n     * @param {number} worldY - World Y offset\n     * @returns {Array} Array of created entity instances\n     */\n    processEntityLayer(layer, worldX, worldY) {\n        const layerEntities = new Set();\n        const createdEntities = [];\n        this.entityLayers.set(layer.__identifier, layerEntities);\n\n        layer.entityInstances.forEach(entity => {\n            const positionKey = this.getPositionKey(entity, worldX, worldY);\n\n            // Skip if position is already occupied\n            if (this.loadedEntityPositions.has(positionKey)) {\n                return;\n            }\n\n            const instance = this.tryCreateEntity(entity, worldX, worldY);\n            if (instance) {\n                this.registerEntity(instance, entity, layerEntities, positionKey, createdEntities);\n            }\n        });\n\n        return createdEntities;\n    }",
        "metadata": {
            "start_line": 99,
            "end_line": 123,
            "notes": "Processes entities within a layer with position tracking and duplicate prevention",
            "imports": [
                "Set",
                "Map",
                "Array",
                "LDtk.Layer"
            ],
            "tags": [
                "layer_processing",
                "entity_creation",
                "position_tracking",
                "core_system",
                "optimization"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 6, "method": "getPositionKey"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 7, "method": "tryCreateEntity"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 8, "method": "registerEntity"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 6,
        "method": "getPositionKey",
        "chunk_text": "    getPositionKey(entity, worldX, worldY) {\n        // Log position key generation\n        const key = `${entity.px[0] + worldX},${entity.px[1] + worldY}`;\n        console.log('Generated position key:', key);\n        return key;\n    }",
        "metadata": {
            "start_line": 124,
            "end_line": 130,
            "notes": "Generates unique position-based key for entity tracking with debug logging",
            "imports": [
                "String",
                "LDtk.Entity"
            ],
            "tags": [
                "helper_method",
                "position_tracking",
                "key_generation",
                "logging",
                "optimization"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 5, "method": "processEntityLayer"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 8, "method": "registerEntity"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 7,
        "method": "tryCreateEntity",
        "chunk_text": "    tryCreateEntity(entity, worldX, worldY) {\n        try {\n            console.log('Creating entity with data:', {\n                identifier: entity.__identifier,\n                position: { x: entity.px[0], y: entity.px[1] },\n                worldPosition: { x: entity.px[0] + worldX, y: entity.px[1] + worldY }\n            });\n\n            const instance = this.createEntityInstance(entity, worldX, worldY);\n            return instance;\n        } catch (error) {\n            console.error('Error creating entity:', error);\n            return null;\n        }\n    }",
        "metadata": {
            "start_line": 131,
            "end_line": 145,
            "notes": "Safely attempts to create an entity with error handling and position logging",
            "imports": [
                "Phaser.GameObjects.GameObject",
                "LDtk.Entity",
                "Error"
            ],
            "tags": [
                "error_handling",
                "entity_creation",
                "helper_method",
                "logging",
                "safety_wrapper"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 3, "method": "createEntityInstance"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 5, "method": "processEntityLayer"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 9, "method": "createFallbackEntity"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 8,
        "method": "registerEntity",
        "chunk_text": "    registerEntity(instance, entityData, layerEntities, positionKey, createdEntities) {\n        // Add to tracking collections\n        this.entityInstances.set(entityData.iid, instance);\n        layerEntities.add(instance);\n        this.loadedEntityPositions.add(positionKey);\n        createdEntities.push(instance);\n\n        // Log registration\n        console.log(`Registered entity ${entityData.__identifier} at ${positionKey}`);\n    }",
        "metadata": {
            "start_line": 146,
            "end_line": 155,
            "notes": "Registers created entity in tracking systems with position and layer management",
            "imports": [
                "Map",
                "Set",
                "Array",
                "LDtk.Entity"
            ],
            "tags": [
                "entity_management",
                "registration",
                "helper_method",
                "position_tracking",
                "logging"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 5, "method": "processEntityLayer"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 6, "method": "getPositionKey"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 7, "method": "tryCreateEntity"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 9,
        "method": "createFallbackEntity",
        "chunk_text": "    createFallbackEntity(entityData, worldX, worldY) {\n        console.warn(`Creating fallback entity for ${entityData.__identifier}`);\n        const x = entityData.px[0] + worldX;\n        const y = entityData.px[1] + worldY;\n\n        const fallbackEntity = this.scene.add.sprite(x, y, 'default_sprite');\n        this.scene.physics.add.existing(fallbackEntity);\n        return fallbackEntity;\n    }",
        "metadata": {
            "start_line": 156,
            "end_line": 164,
            "notes": "Creates default sprite entity when no factory exists for entity type",
            "imports": [
                "Phaser.GameObjects.Sprite",
                "Phaser.Physics.Arcade.Sprite",
                "Phaser.Scene",
                "LDtk.Entity"
            ],
            "tags": [
                "fallback_handling",
                "entity_creation",
                "helper_method",
                "error_handling",
                "physics"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 3, "method": "createEntityInstance"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 7, "method": "tryCreateEntity"}
            ]
        }
    },
    {
        "file_name": "LDTKEntityManager.js",
        "chunk_index": 10,
        "method": "getPlayerStart",
        "chunk_text": "    /**\n     * Retrieves the player start coordinates from the level data\n     * @param {object} levelData - The level data object\n     * @param {number} worldX - World X offset\n     * @param {number} worldY - World Y offset\n     * @returns {object} The player start coordinates {x, y}\n     */\n    getPlayerStart(levelData, worldX = 0, worldY = 0) {\n        console.log('Getting PlayerStart from level data:', levelData);\n\n        // Handle both direct layerInstances and nested levels structure\n        const layerInstances = levelData.layerInstances || \n                              (levelData.levels?.[0]?.layerInstances) || \n                              [];\n\n        console.log('Layer instances:', layerInstances);\n\n        for (const layer of layerInstances) {\n            console.log('Checking layer:', {\n                identifier: layer.__identifier,\n                type: layer.__type,\n                entityCount: layer.entityInstances?.length\n            });\n\n            if (layer.__type === \"Entities\") {\n                // Then find the entity named \"PlayerStart\"\n                const playerStartEntity = layer.entityInstances?.find(\n                  e => e.__identifier === \"PlayerStart\"\n                );\n\n                console.log('PlayerStart entity found:', playerStartEntity);\n\n                if (playerStartEntity) {\n                  const spawn = {\n                    x: playerStartEntity.px[0],\n                    y: playerStartEntity.px[1]\n                  };\n                  console.log('Found PlayerStart:', spawn);\n                  return spawn;\n                }\n              }\n        }\n    }",
        "metadata": {
            "start_line": 176,
            "end_line": 225,
            "notes": "Locates and extracts player spawn coordinates from LDtk level data with nested structure support",
            "imports": [
                "LDtk.Level",
                "LDtk.Layer",
                "Array",
                "Object"
            ],
            "tags": [
                "player_spawn",
                "level_data",
                "helper_method",
                "entity_search",
                "logging"
            ],
            "related_chunks": [
                {"file_name": "LDTKEntityManager.js", "chunk_index": 4, "method": "createEntities"},
                {"file_name": "LDTKEntityManager.js", "chunk_index": 5, "method": "processEntityLayer"}
            ]
        }
    }
]