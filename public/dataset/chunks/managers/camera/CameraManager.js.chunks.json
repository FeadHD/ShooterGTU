[
  {
    "file_name": "CameraManager.js",
    "chunk_index": 0,
    "method": "imports",
    "chunk_text": "import { BaseManager } from '../core/BaseManager';\nimport { container } from '../core/ServiceContainer';",
    "metadata": {
      "start_line": 1,
      "end_line": 2,
      "notes": "Imports base manager and service container for camera management",
      "imports": [
        "BaseManager",
        "ServiceContainer.container"
      ],
      "tags": [
        "imports",
        "core_system",
        "camera_system",
        "dependency_injection"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 1, "method": "classDefinition"},
        {"file_name": "CameraManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 1,
    "method": "classDefinition",
    "chunk_text": "/**\n * CameraManager.js\n * Manages camera behavior and effects for the game\n * Extends BaseManager for core functionality\n *\n * @class CameraManager\n * @extends BaseManager\n * @description\n * Handles:\n * - Camera following\n * - Screen shake effects\n * - Zoom levels\n * - Camera bounds\n * - Smooth transitions\n *\n * @requires Phaser.Scene\n * @requires Phaser.Cameras.Scene2D.Camera\n * @requires BaseManager\n */\nexport class CameraManager extends BaseManager {",
    "metadata": {
      "start_line": 4,
      "end_line": 22,
      "notes": "Defines camera manager class for handling game camera effects and behavior",
      "imports": [
        "Phaser.Scene",
        "Phaser.Cameras.Scene2D.Camera",
        "BaseManager"
      ],
      "tags": [
        "class_definition",
        "core_system",
        "camera_system",
        "game_effects"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 0, "method": "imports"},
        {"file_name": "CameraManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 2,
    "method": "constructor",
    "chunk_text": "    /**\n     * Initialize camera manager\n     * @param {Phaser.Scene} scene - Scene this manager belongs to\n     * \n     * @description\n     * Sets up:\n     * - Main camera reference\n     * - Default configuration\n     * - Shake effect settings\n     * - Follow settings\n     * \n     * @requires Phaser.Scene\n     */\n    constructor(scene) {\n        super(scene);\n        \n        // Store main camera reference\n        this.camera = scene.cameras.main;\n        \n        // Default configuration\n        this.config = {\n            follow: {\n                offsetX: 0,\n                offsetY: 0,\n                lerp: 1\n            },\n            shake: {\n                duration: 100,\n                intensity: 0.01\n            },\n            zoom: {\n                default: 1,\n                min: 0.5,\n                max: 2\n            }\n        };\n        \n        // Register with container\n        container.register('camera', this);\n    }",
    "metadata": {
      "start_line": 24,
      "end_line": 58,
      "notes": "Initializes camera manager with default configuration and camera reference",
      "imports": [
        "Phaser.Scene",
        "Phaser.Cameras.Scene2D.Camera",
        "ServiceContainer.container"
      ],
      "tags": [
        "initialization",
        "core_system",
        "camera_system",
        "configuration"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 1, "method": "classDefinition"},
        {"file_name": "CameraManager.js", "chunk_index": 3, "method": "initialize"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 3,
    "method": "initialize",
    "chunk_text": "    /**\n     * Initialize camera system\n     * Sets up initial camera state and configuration\n     * \n     * @description\n     * Performs:\n     * - Camera bounds setup\n     * - Default zoom setting\n     * - Initial position\n     * - Effect configuration\n     */\n    initialize() {\n        console.log('Initializing camera system...');\n        \n        // Set initial zoom\n        this.camera.setZoom(this.config.zoom.default);\n        \n        // Reset any active effects\n        this.camera.resetFX();\n        \n        console.log('Camera system initialized.');\n    }",
    "metadata": {
      "start_line": 60,
      "end_line": 79,
      "notes": "Sets up initial camera state and configures default settings",
      "imports": [
        "Phaser.Cameras.Scene2D.Camera"
      ],
      "tags": [
        "initialization",
        "core_system",
        "camera_system",
        "setup"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 2, "method": "constructor"},
        {"file_name": "CameraManager.js", "chunk_index": 4, "method": "follow"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 4,
    "method": "follow",
    "chunk_text": "    /**\n     * Set camera to follow a target\n     * @param {Phaser.GameObjects.Sprite} target - Game object to follow\n     * @param {Object} [options] - Optional follow settings\n     * @param {number} [options.offsetX=0] - Horizontal offset from target\n     * @param {number} [options.offsetY=0] - Vertical offset from target\n     * @param {number} [options.lerp=1] - Follow smoothing factor (0-1)\n     * \n     * @description\n     * Configures camera to follow target with:\n     * - Customizable offset position\n     * - Smooth follow interpolation\n     * - Proper bounds checking\n     */\n    follow(target, options = {}) {\n        const { offsetX = 0, offsetY = 0, lerp = 1 } = options;\n        \n        this.camera.startFollow(\n            target,\n            true,\n            lerp,\n            lerp,\n            offsetX,\n            offsetY\n        );\n        \n        // Update follow config\n        this.config.follow = { offsetX, offsetY, lerp };\n    }",
    "metadata": {
      "start_line": 81,
      "end_line": 108,
      "notes": "Configures camera to follow a game object with customizable settings",
      "imports": [
        "Phaser.GameObjects.Sprite",
        "Phaser.Cameras.Scene2D.Camera"
      ],
      "tags": [
        "core_system",
        "camera_system",
        "follow",
        "game_objects"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 3, "method": "initialize"},
        {"file_name": "CameraManager.js", "chunk_index": 5, "method": "shake"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 5,
    "method": "shake",
    "chunk_text": "    /**\n     * Apply screen shake effect\n     * @param {Object} [options] - Optional shake settings\n     * @param {number} [options.duration=100] - Effect duration in ms\n     * @param {number} [options.intensity=0.01] - Shake intensity (0-1)\n     * \n     * @description\n     * Creates screen shake effect with:\n     * - Configurable duration\n     * - Adjustable intensity\n     * - Smooth transitions\n     */\n    shake(options = {}) {\n        const { duration = 100, intensity = 0.01 } = options;\n        \n        this.camera.shake(duration, intensity);\n        \n        // Update shake config\n        this.config.shake = { duration, intensity };\n    }",
    "metadata": {
      "start_line": 110,
      "end_line": 129,
      "notes": "Applies screen shake effect with configurable parameters",
      "imports": [
        "Phaser.Cameras.Scene2D.Camera"
      ],
      "tags": [
        "core_system",
        "camera_system",
        "effects",
        "game_feedback"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 4, "method": "follow"},
        {"file_name": "CameraManager.js", "chunk_index": 6, "method": "setZoom"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 6,
    "method": "setZoom",
    "chunk_text": "    /**\n     * Set camera zoom level\n     * @param {number} level - Zoom level (0.5-2)\n     * @param {Object} [options] - Optional zoom settings\n     * @param {number} [options.duration=0] - Transition duration in ms\n     * \n     * @description\n     * Adjusts camera zoom with:\n     * - Bounds checking\n     * - Optional smooth transition\n     * - Config persistence\n     * \n     * @throws {Error} If zoom level is outside valid range\n     */\n    setZoom(level, options = {}) {\n        const { duration = 0 } = options;\n        \n        // Validate zoom level\n        if (level < this.config.zoom.min || level > this.config.zoom.max) {\n            throw new Error(`Zoom level must be between ${this.config.zoom.min} and ${this.config.zoom.max}`);\n        }\n        \n        if (duration > 0) {\n            this.camera.zoomTo(level, duration);\n        } else {\n            this.camera.setZoom(level);\n        }\n        \n        // Update zoom config\n        this.config.zoom.default = level;\n    }",
    "metadata": {
      "start_line": 131,
      "end_line": 160,
      "notes": "Sets camera zoom level with optional smooth transition",
      "imports": [
        "Phaser.Cameras.Scene2D.Camera"
      ],
      "tags": [
        "core_system",
        "camera_system",
        "zoom",
        "configuration"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 5, "method": "shake"},
        {"file_name": "CameraManager.js", "chunk_index": 7, "method": "setBounds"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 7,
    "method": "setBounds",
    "chunk_text": "    /**\n     * Set camera bounds\n     * @param {Object} bounds - Boundary settings\n     * @param {number} bounds.x - Left boundary\n     * @param {number} bounds.y - Top boundary\n     * @param {number} bounds.width - Boundary width\n     * @param {number} bounds.height - Boundary height\n     * \n     * @description\n     * Updates camera boundaries with:\n     * - Position constraints\n     * - Size limits\n     * - World alignment\n     */\n    setBounds({ x, y, width, height }) {\n        this.camera.setBounds(x, y, width, height);\n        \n        console.log('Camera bounds set:', { x, y, width, height });\n    }",
    "metadata": {
      "start_line": 162,
      "end_line": 180,
      "notes": "Sets camera boundary constraints for world limits",
      "imports": [
        "Phaser.Cameras.Scene2D.Camera"
      ],
      "tags": [
        "core_system",
        "camera_system",
        "boundaries",
        "configuration"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 6, "method": "setZoom"},
        {"file_name": "CameraManager.js", "chunk_index": 8, "method": "playIntroSequence"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 8,
    "method": "playIntroSequence",
    "chunk_text": "    /**\n     * Play camera intro sequence\n     * @param {Phaser.GameObjects.Sprite} target - Target to focus on\n     * @param {Object} [options] - Optional sequence settings\n     * @param {number} [options.duration=2000] - Sequence duration in ms\n     * @param {string} [options.ease='Power2'] - Easing function name\n     * \n     * @description\n     * Creates cinematic intro sequence:\n     * - Smooth pan to target\n     * - Configurable duration\n     * - Custom easing\n     * - Auto-transition to follow\n     */\n    playIntroSequence(target, options = {}) {\n        const { duration = 2000, ease = 'Power2' } = options;\n        this.isIntroPlaying = true;\n        \n        // Calculate target position\n        const targetX = target.x - this.camera.width / 2;\n        const targetY = target.y - this.camera.height / 2;\n        \n        // Create pan tween\n        this.introTweens.push(\n            this.scene.tweens.add({\n                targets: this.camera,\n                scrollX: targetX,\n                scrollY: targetY,\n                duration: duration,\n                ease: ease,\n                onComplete: () => {\n                    this.stopIntroSequence();\n                    this.follow(target);\n                }\n            })\n        );\n    }",
    "metadata": {
      "start_line": 182,
      "end_line": 215,
      "notes": "Creates cinematic camera intro sequence with smooth transitions",
      "imports": [
        "Phaser.GameObjects.Sprite",
        "Phaser.Cameras.Scene2D.Camera",
        "Phaser.Tweens.TweenManager"
      ],
      "tags": [
        "core_system",
        "camera_system",
        "effects",
        "game_intro"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 7, "method": "setBounds"},
        {"file_name": "CameraManager.js", "chunk_index": 9, "method": "stopIntroSequence"}
      ]
    }
  },
  {
    "file_name": "CameraManager.js",
    "chunk_index": 9,
    "method": "stopIntroSequence",
    "chunk_text": "    /**\n     * Stop intro sequence\n     * @description\n     * Cleans up intro sequence:\n     * - Stops active tweens\n     * - Clears tween array\n     * - Updates sequence state\n     * - Ensures proper follow behavior\n     */\n    stopIntroSequence() {\n        // Stop all intro tweens\n        this.introTweens.forEach(tween => {\n            if (tween.isPlaying) {\n                tween.stop();\n            }\n        });\n        \n        // Clear tweens and reset state\n        this.introTweens = [];\n        this.isIntroPlaying = false;\n    }",
    "metadata": {
      "start_line": 217,
      "end_line": 236,
      "notes": "Handles cleanup and state reset after intro sequence",
      "imports": [
        "Phaser.Tweens.Tween",
        "Phaser.Cameras.Scene2D.Camera"
      ],
      "tags": [
        "core_system",
        "camera_system",
        "cleanup",
        "game_intro"
      ],
      "related_chunks": [
        {"file_name": "CameraManager.js", "chunk_index": 8, "method": "playIntroSequence"},
        {"file_name": "CameraManager.js", "chunk_index": 4, "method": "follow"}
      ]
    }
  }
]
