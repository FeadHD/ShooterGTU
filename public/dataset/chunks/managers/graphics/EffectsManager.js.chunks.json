[
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 0,
      "method": "imports",
      "chunk_text": "import { ParticlePool } from '../../pools/ParticlePool';",
      "metadata": {
        "start_line": 8,
        "end_line": 8,
        "notes": "Import statements for required dependencies",
        "imports": [
          "../../pools/ParticlePool"
        ]
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 1,
      "method": "class_definition",
      "chunk_text": "/**\n * @file\n * Visual and audio effects management system\n * \n * @module managers/graphics\n * @description\n * Centralizes game feedback effects including:\n * - Particle systems (hits, explosions)\n * - Sound effects with volume control\n * - Visual feedback (flashing, tweens)\n * - Resource pooling for performance\n * \n * @requires Phaser.Scene\n * @requires ParticlePool\n * @requires Phaser.Sound.BaseSound\n */\n\nexport class EffectsManager {",
      "metadata": {
        "start_line": 1,
        "end_line": 10,
        "notes": "File-level documentation with complete module info and dependencies",
        "imports": []
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 2,
      "method": "constructor",
      "chunk_text": "    /**\n     * Initialize the effects management system\n     * \n     * @param {Phaser.Scene} scene - Scene to attach effects to\n     * \n     * @property {Phaser.Scene} scene - Reference to the parent scene\n     * @property {Object.<string, Phaser.Sound.BaseSound>} sounds - Dictionary of loaded sound effects\n     * @property {ParticlePool} particlePool - Pool of reusable particle effects\n     * \n     * @fires Phaser.Sound.Events#READY When sound system is initialized\n     * @throws {Error} If scene is invalid or sound system unavailable\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.sounds = {};\n        this.particlePool = new ParticlePool(scene, 50);  // Pool size of 50 particles\n        this.initializeSounds();\n    }",
      "metadata": {
        "start_line": 12,
        "end_line": 20,
        "notes": "Constructor with complete property documentation and error handling",
        "imports": []
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 3,
      "method": "initializeSounds",
      "chunk_text": "    /**\n     * Load and configure game sound effects\n     * Sets appropriate volume levels for different effect types\n     */\n    initializeSounds() {\n        const soundKeys = ['laser', 'hit', 'playerHit', 'explosion'];\n        soundKeys.forEach(key => {\n            if (this.scene.cache.audio.exists(key)) {\n                this.sounds[key] = this.scene.sound.add(key, {\n                    volume: key === 'laser' ? 0.05 :\n                            key === 'hit' ? 0.1 :\n                            key === 'playerHit' ? 0.15 :\n                            0.2\n                });\n            }\n        });\n    }",
      "metadata": {
        "start_line": 22,
        "end_line": 37,
        "notes": "Method to initialize sound effects with different volume levels",
        "imports": []
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 4,
      "method": "createHitEffect",
      "chunk_text": "    /**\n     * Create a particle hit effect with sound\n     * \n     * @param {number} x - X coordinate for the effect\n     * @param {number} y - Y coordinate for the effect\n     * @param {number} [color=0xffff00] - Particle color in hex format\n     * \n     * @fires Phaser.Sound.Events#PLAY When hit sound plays\n     * @see ParticlePool.createEffect For particle configuration\n     * \n     * @example\n     * // Create yellow hit effect\n     * effectsManager.createHitEffect(100, 100);\n     * // Create custom color hit effect\n     * effectsManager.createHitEffect(200, 200, 0xff0000);\n     */\n    createHitEffect(x, y, color = 0xffff00) {\n        this.particlePool.createEffect(x, y, color);\n        this.playSound('hit');\n    }",
      "metadata": {
        "start_line": 39,
        "end_line": 44,
        "notes": "Hit effect creation with particle and sound integration, includes examples",
        "imports": []
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 5,
      "method": "createExplosionEffect",
      "chunk_text": "    /**\n     * Create larger explosion effect and sound\n     * Used for enemy deaths or major impacts\n     */\n    createExplosionEffect(x, y) {\n        this.particlePool.createEffect(x, y, 0xff0000, 20);  // Red particles\n        this.playSound('explosion');\n    }",
      "metadata": {
        "start_line": 46,
        "end_line": 51,
        "notes": "Method to spawn a red explosion effect with explosion sound",
        "imports": []
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 6,
      "method": "playSound",
      "chunk_text": "    /**\n     * Play a sound effect by its key\n     * \n     * @param {string} key - Key of the sound to play\n     * @description\n     * Safely plays a sound effect, handling cases where the sound might not exist.\n     * Volume levels are preset during initialization:\n     * - laser: 0.05 (quiet for frequent sounds)\n     * - hit: 0.1\n     * - playerHit: 0.15\n     * - others: 0.2 (default)\n     * \n     * @fires Phaser.Sound.Events#PLAY When sound starts\n     * @fires Phaser.Sound.Events#COMPLETE When sound finishes\n     * \n     * @example\n     * effectsManager.playSound('explosion');\n     */\n    playSound(key) {\n        if (this.sounds[key]) {\n            this.sounds[key].play();\n        }\n    }",
      "metadata": {
        "start_line": 53,
        "end_line": 58,
        "notes": "Sound playback with volume presets and event documentation",
        "imports": []
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 7,
      "method": "createFlashEffect",
      "chunk_text": "    /**\n     * Create flashing effect on target\n     * Used for damage feedback or highlighting\n     * @param {Phaser.GameObjects.Sprite} target - Object to flash\n     * @param {number} duration - Flash duration in ms\n     * @param {number} repeat - Number of flash cycles\n     */\n    createFlashEffect(target, duration = 100, repeat = 4) {\n        if (!target) return;\n        \n        this.scene.tweens.add({\n            targets: target,\n            alpha: 0.5,                     // Flash transparency\n            duration: duration,\n            yoyo: true,                     // Fade in and out\n            repeat: repeat,\n            onComplete: () => target.setAlpha(1)\n        });\n    }",
      "metadata": {
        "start_line": 60,
        "end_line": 74,
        "notes": "Method to create a temporary flashing effect on a target sprite",
        "imports": []
      }
    },
    {
      "file_name": "EffectsManager.js",
      "chunk_index": 8,
      "method": "cleanup",
      "chunk_text": "    /**\n     * Clean up all active effects and resources\n     * \n     * @description\n     * Performs complete cleanup of the effects system:\n     * 1. Stops and destroys all sound instances\n     * 2. Clears the sound dictionary\n     * 3. Destroys the particle pool\n     * \n     * Call this when:\n     * - Transitioning between scenes\n     * - Shutting down the game\n     * - Resetting the effects system\n     * \n     * @fires Phaser.Sound.Events#DESTROY For each sound destroyed\n     * @fires ParticlePool#DESTROY When particle pool is destroyed\n     */\n    cleanup() {\n        // Stop and destroy all sound effects\n        Object.values(this.sounds).forEach(sound => {\n            if (sound) {\n                sound.stop();\n                sound.destroy();\n            }\n        });\n        this.sounds = {};\n\n        // Clean up particle effects\n        this.particlePool.destroy();\n    }",
      "metadata": {
        "start_line": 76,
        "end_line": 93,
        "notes": "Comprehensive cleanup method with event documentation and usage guidance",
        "imports": []
      }
    }
  ]