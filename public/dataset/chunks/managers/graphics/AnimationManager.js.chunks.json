[
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 0,
    "method": "imports",
    "chunk_text": "",
    "metadata": {
      "start_line": 1,
      "end_line": 1,
      "notes": "No import statements found",
      "imports": [],
      "tags": ["imports", "dependencies", "phaser3", "animation_management"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 1,
    "method": "class_definition",
    "chunk_text": "/**\n * @file\n * Manages sprite animations for all game entities, UI elements, and objects.\n * Provides centralized animation management and creation for the entire game.\n *\n * @module managers/graphics\n */\n\n/**\n * Central manager for all game animations\n *\n * @class AnimationManager\n * @description\n * Handles creation and playback of all game animations including:\n * - Character animations (player, enemies)\n * - UI animations (HUD, health, stamina)\n * - Object animations (projectiles, collectibles)\n * - Loading and transition effects\n *\n * @requires Phaser.Scene\n * @requires Phaser.GameObjects.Sprite\n * @requires Phaser.Animations.AnimationManager\n *\n * @see {@link Phaser.Scene} Required for animation creation\n * @see {@link Phaser.Animations.Animation} Core animation object\n */\nexport class AnimationManager {",
    "metadata": {
      "start_line": 1,
      "end_line": 24,
      "notes": "File-level and class-level documentation with complete API references",
      "imports": [],
      "tags": ["file", "documentation", "module", "animation_manager", "phaser3"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 2,
    "method": "constructor",
    "chunk_text": "    /**\n     * Initialize the animation management system\n     * \n     * @param {Phaser.Scene} scene - The scene that owns this animation manager\n     * \n     * @description\n     * Creates a new AnimationManager instance and sets up:\n     * - Scene reference for animation creation\n     * - Initialization tracking\n     * \n     * @property {Phaser.Scene} scene - Reference to the parent scene\n     * @property {boolean} initialized - Tracks if animations have been created\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.initialized = false;\n    }",
    "metadata": {
      "start_line": 26,
      "end_line": 40,
      "notes": "Constructor with complete property documentation",
      "imports": [],
      "tags": ["constructor", "initialization", "animation_manager", "scene", "phaser3"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 3,
    "method": "initialize",
    "chunk_text": "    /**\n     * Initialize all game animations\n     * \n     * @description\n     * Called once during scene startup to create all game animations.\n     * Ensures animations are only created once, preventing duplicates.\n     * \n     * @fires Phaser.Animations.Events#ADD_ANIMATION Multiple times as animations are created\n     * @returns {void}\n     */\n    initialize() {\n        if (!this.initialized) {\n            this.createAllAnimations();\n            this.initialized = true;\n        }\n    }",
    "metadata": {
      "start_line": 42,
      "end_line": 50,
      "notes": "Method to create all animations once at scene startup with complete documentation",
      "imports": [],
      "tags": ["initialization", "animation_creation", "scene_startup", "phaser3"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 4,
    "method": "hasAnimation",
    "chunk_text": "    /**\n     * Check if an animation exists in the scene\n     * \n     * @param {string} key - The unique identifier of the animation to check\n     * @returns {boolean} True if the animation exists, false otherwise\n     * \n     * @example\n     * if (animManager.hasAnimation('player_walk')) {\n     *     sprite.play('player_walk');\n     * }\n     */\n    hasAnimation(key) {\n        return this.scene.anims.exists(key);\n    }",
    "metadata": {
      "start_line": 52,
      "end_line": 57,
      "notes": "Method to check animation existence with example usage",
      "imports": [],
      "tags": ["animation_check", "utility", "phaser3", "gameplay"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 5,
    "method": "play",
    "chunk_text": "    /**\n     * Play an animation on a game object\n     * \n     * @param {Phaser.GameObjects.Sprite|Phaser.GameObjects.Container} gameObject - The object to animate\n     * @param {string} key - The animation key to play\n     * @param {boolean} [ignoreIfPlaying=true] - If already playing this animation, skip starting it again\n     * \n     * @returns {boolean} True if the animation was started, false if it doesn't exist\n     * \n     * @fires Phaser.Animations.Events#ANIMATION_START If animation begins\n     * @fires Phaser.Animations.Events#ANIMATION_COMPLETE When animation finishes\n     * \n     * @example\n     * animManager.play(playerSprite, 'walk_right', true);\n     */\n    play(gameObject, key, ignoreIfPlaying = true) {\n        if (this.hasAnimation(key)) {\n            gameObject.play(key, ignoreIfPlaying);\n            return true;\n        }\n        return false;\n    }",
    "metadata": {
      "start_line": 59,
      "end_line": 68,
      "notes": "Method to play animations with complete parameter documentation and events",
      "imports": [],
      "tags": ["animation_playback", "animation_control", "phaser3", "gameplay", "events"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 6,
    "method": "playHealthTransition",
    "chunk_text": "    // ------------------------------------------------------------------------\n    //  DYNAMIC / EPHEMERAL ANIMATIONS\n    // ------------------------------------------------------------------------\n\n    /**\n     * Example: If the HUD wants partial-step transitions between frames,\n     * we can create a temporary animation, then remove it after playing.\n     * The PlayerHUD will call this instead of creating its own anims.\n     *\n     * @param {Phaser.GameObjects.Sprite} sprite - The health sprite\n     * @param {number} prevFrame - Frame index currently displayed\n     * @param {number} targetFrame - Frame index we want to get to\n     * @param {function} [onComplete] - Optional callback after finishing\n     */\n    playHealthTransition(sprite, prevFrame, targetFrame, onComplete = null) {\n        // If frames are the same, just set it and exit\n        if (prevFrame === targetFrame) {\n            sprite.setFrame(targetFrame);\n            if (onComplete) onComplete();\n            return;\n        }\n\n        // Build ascending or descending frames\n        const frames = [];\n        if (targetFrame > prevFrame) {\n            for (let i = prevFrame; i <= targetFrame; i++) {\n                frames.push({ key: 'health', frame: i });\n            }\n        } else {\n            for (let i = prevFrame; i >= targetFrame; i--) {\n                frames.push({ key: 'health', frame: i });\n            }\n        }\n\n        // If there's only 1 or 0 frames, just setFrame and exit\n        if (frames.length <= 1) {\n            sprite.setFrame(targetFrame);\n            if (onComplete) onComplete();\n            return;\n        }\n\n        // Create a unique key\n        const animKey = `health_change_${Date.now()}`;\n\n        // Create ephemeral animation\n        this.scene.anims.create({\n            key: animKey,\n            frames,\n            frameRate: 8,\n            repeat: 0\n        });\n\n        // Play and remove the anim key after it's done\n        sprite.play(animKey);\n        sprite.once('animationcomplete', () => {\n            this.scene.anims.remove(animKey);\n            sprite.setFrame(targetFrame);\n            if (onComplete) onComplete();\n        });\n    }",
    "metadata": {
      "start_line": 70,
      "end_line": 122,
      "notes": "Creates a temporary health transition animation and destroys it upon completion",
      "imports": [],
      "tags": ["dynamic_animations", "ephemeral_animations", "health_transition", "phaser3", "sprite_animations"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 7,
    "method": "createBulletAnimation",
    "chunk_text": "    /**\n     * Create the bullet projectile animation\n     * \n     * @description\n     * Creates a looping animation for bullet projectiles using a 4-frame sprite sheet.\n     * Animation key: 'bullet_animation'\n     * \n     * @requires The 'bullet_animation' sprite sheet must be loaded with 4 sequential frames\n     * @fires Phaser.Animations.Events#ADD_ANIMATION When animation is created\n     * \n     * @example\n     * // After creation, play on a sprite:\n     * bulletSprite.play('bullet_animation');\n     */\n    createBulletAnimation() {\n        if (!this.scene.anims.exists('bullet_animation')) {\n            this.scene.anims.create({\n                key: 'bullet_animation',\n                frames: this.scene.anims.generateFrameNumbers('bullet_animation', { start: 0, end: 3 }),\n                frameRate: 10,\n                repeat: -1 // Loop indefinitely\n            });\n        }\n    }",
    "metadata": {
      "start_line": 124,
      "end_line": 137,
      "notes": "Method to create bullet animation with complete documentation and requirements",
      "imports": [],
      "tags": ["bullet_animation", "sprite_sheet", "looping_animation", "projectiles", "phaser3"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 8,
    "method": "createCharacterAnimations",
    "chunk_text": "    /**\n     * Player character animations\n     */\n    createCharacterAnimations() {\n        const animations = [\n            {\n                key: 'character_Idle',\n                texture: 'character_idle',\n                frames: { start: 0, end: 3 },\n                frameRate: 8,\n                repeat: -1\n            },\n            {\n                key: 'character_Walk',\n                texture: 'character_walk',\n                frames: { start: 0, end: 5 },\n                frameRate: 10,\n                repeat: -1\n            },\n            {\n                key: 'character_Death',\n                texture: 'character_death',\n                frames: { start: 0, end: 5 },\n                frameRate: 8,\n                repeat: 0\n            },\n            {\n                key: 'character_Jump',\n                texture: 'character_jump',\n                frames: { start: 0, end: 1 },\n                frameRate: 10,\n                repeat: 0\n            },\n            {\n                key: 'character_Fall',\n                texture: 'character_fall',\n                frames: { start: 0, end: 1 },\n                frameRate: 10,\n                repeat: 0\n            },\n            {\n                key: 'character_Roll',\n                texture: 'character_roll',\n                frames: { start: 0, end: 3 },\n                frameRate: 15,\n                repeat: 0\n            }\n        ];\n\n        animations.forEach(anim => {\n            if (!this.scene.textures.exists(anim.texture)) {\n                console.warn(`Texture not found for animation: ${anim.texture}`);\n                return;\n            }\n            if (!this.scene.anims.exists(anim.key)) {\n                this.scene.anims.create({\n                    key: anim.key,\n                    frames: this.scene.anims.generateFrameNumbers(anim.texture, anim.frames),\n                    frameRate: anim.frameRate,\n                    repeat: anim.repeat\n                });\n                console.log(`Created animation: ${anim.key}`);\n            }\n        });\n    }",
    "metadata": {
      "start_line": 139,
      "end_line": 197,
      "notes": "Method to create all standard character animations",
      "imports": [],
      "tags": ["character_animations", "player_animations", "phaser3", "animation_creation", "gameplay"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 9,
    "method": "createEnemyAnimations",
    "chunk_text": "    /**\n * Dynamically creates animations for enemies based on loaded assets.\n */\n    createEnemyAnimations() {\n        console.log('Creating enemy animations dynamically...');\n\n        const enemyAnimations = [\n            // Melee Warrior Animations\n            { key: 'meleewarrior_attack1', texture: 'melee_warrior_attack1', frames: { start: 0, end: 6 }, frameRate: 8, repeat: 0 },\n            { key: 'meleewarrior_attack2', texture: 'melee_warrior_attack2', frames: { start: 0, end: 6 }, frameRate: 8, repeat: 0 },\n            { key: 'meleewarrior_attack3', texture: 'melee_warrior_attack3', frames: { start: 0, end: 6 }, frameRate: 8, repeat: 0 },\n            { key: 'meleewarrior_death', texture: 'melee_warrior_death', frames: { start: 0, end: 8 }, frameRate: 8, repeat: 0 },\n            { key: 'meleewarrior_defend', texture: 'melee_warrior_defend', frames: { start: 0, end: 3 }, frameRate: 8, repeat: 0 },\n            { key: 'meleewarrior_walk', texture: 'melee_warrior_walk', frames: { start: 0, end: 7 }, frameRate: 8, repeat: -1 },\n            { key: 'meleewarrior_hurt', texture: 'melee_warrior_hurt', frames: { start: 0, end: 3 }, frameRate: 8, repeat: 0 },\n            { key: 'meleewarrior_jump', texture: 'melee_warrior_jump', frames: { start: 0, end: 3 }, frameRate: 8, repeat: 0 },\n            { key: 'meleewarrior_idle', texture: 'melee_warrior_idle', frames: { start: 0, end: 5 }, frameRate: 8, repeat: -1 },\n\n            // Zapper Animations\n            { key: 'zapper_idle', texture: 'zapper_idle', frames: { start: 0, end: 0 }, frameRate: 8, repeat: -1 },\n            { key: 'zapper_wake', texture: 'zapper_wake', frames: { start: 0, end: 5 }, frameRate: 8, repeat: 0 },\n            { key: 'zapper_walk', texture: 'zapper_walk', frames: { start: 0, end: 5 }, frameRate: 8, repeat: -1 },\n            { key: 'zapper_attack', texture: 'zapper_attack', frames: { start: 0, end: 9 }, frameRate: 15, repeat: 0 },\n            { key: 'zapper_shock', texture: 'zapper_shock', frames: { start: 0, end: 3 }, frameRate: 8, repeat: 0 },\n            { key: 'zapper_death', texture: 'zapper_death', frames: { start: 0, end: 7 }, frameRate: 8, repeat: 0 }\n        ];\n\n        // Loop through animations and dynamically create them\n        enemyAnimations.forEach(anim => {\n            if (!this.scene.textures.exists(anim.texture)) {\n                console.warn(`Texture not found for animation: ${anim.texture}`);\n                return; // Skip if texture is not loaded\n            }\n\n            if (!this.scene.anims.exists(anim.key)) {\n                const frames = this.scene.anims.generateFrameNumbers(anim.texture, anim.frames);\n                if (!frames || frames.length === 0) {\n                    console.warn(`No valid frames found for animation: ${anim.key}`);\n                    return; // Skip if no valid frames are generated\n                }\n\n                this.scene.anims.create({\n                    key: anim.key,\n                    frames,\n                    frameRate: anim.frameRate,\n                    repeat: anim.repeat,\n                });\n                console.log(`Created animation: ${anim.key}`);\n            }\n        });\n    }",
    "metadata": {
      "start_line": 199,
      "end_line": 259,
      "notes": "Creates dynamic enemy animations (MeleeWarrior, Zapper, etc.) if not already existing",
      "imports": [],
      "tags": ["enemy_animations", "dynamic_animations", "melee_warrior", "zapper", "phaser3", "sprite_animations"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 10,
    "method": "createBitcoinAnimations",
    "chunk_text": "    // ------------------------------------------------------------------------\n    //  NON-CHARACTER (UI / OBJECTS / ETC.)\n    // ------------------------------------------------------------------------\n\n    /**\n     * Bitcoin spin\n     */\n    createBitcoinAnimations() {\n        if (!this.scene.anims.exists('bitcoin_spin')) {\n            this.scene.anims.create({\n                key: 'bitcoin_spin',\n                frames: [\n                    { key: 'bitcoin_1' },\n                    { key: 'bitcoin_2' },\n                    { key: 'bitcoin_3' },\n                    { key: 'bitcoin_4' },\n                    { key: 'bitcoin_5' },\n                    { key: 'bitcoin_6' },\n                    { key: 'bitcoin_7' },\n                    { key: 'bitcoin_8' }\n                ],\n                frameRate: 10,\n                repeat: -1\n            });\n        }\n    }",
    "metadata": {
      "start_line": 261,
      "end_line": 282,
      "notes": "Method for a continuously spinning Bitcoin animation",
      "imports": [],
      "tags": ["bitcoin_animation", "spin_animation", "phaser3", "object_animations"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 11,
    "method": "createHUDAnimations",
    "chunk_text": "    /**\n     * HUD animations (simple frame-based)\n     */\n    createHUDAnimations() {\n        // Health frames\n        if (!this.scene.anims.exists('health_0')) {\n            for (let i = 0; i <= 9; i++) {\n                this.scene.anims.create({\n                    key: `health_${i}`,\n                    frames: [{ key: 'health', frame: i }],\n                    frameRate: 0,\n                    repeat: 0\n                });\n            }\n        }\n\n        // Stamina frames\n        if (!this.scene.anims.exists('stamina_0')) {\n            for (let i = 0; i <= 9; i++) {\n                this.scene.anims.create({\n                    key: `stamina_${i}`,\n                    frames: [{ key: 'stamina', frame: i }],\n                    frameRate: 0,\n                    repeat: 0\n                });\n            }\n        }\n    }",
    "metadata": {
      "start_line": 284,
      "end_line": 309,
      "notes": "Method to create simple frame-based health and stamina HUD animations",
      "imports": [],
      "tags": ["hud_animations", "health_animations", "stamina_animations", "phaser3", "ui_animations"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 12,
    "method": "createPreloaderAnimations",
    "chunk_text": "    /**\n     * Preloader \"loading\" animation\n     */\n    createPreloaderAnimations() {\n        if (!this.scene.anims.exists('loading')) {\n            this.scene.anims.create({\n                key: 'loading',\n                frames: this.scene.anims.generateFrameNumbers('preloader', { start: 0, end: 15 }),\n                frameRate: 12,\n                repeat: -1\n            });\n        }\n    }",
    "metadata": {
      "start_line": 311,
      "end_line": 322,
      "notes": "Method for a preloader looping animation",
      "imports": [],
      "tags": ["preloader_animation", "loading_animation", "phaser3", "animation_creation"]
    }
  },
  {
    "file_name": "AnimationManager.js",
    "chunk_index": 13,
    "method": "createAllAnimations",
    "chunk_text": "    /**\n     * Create all game animations\n     * \n     * @description\n     * Master method that creates all animations used in the game.\n     * Groups animations by category for better organization:\n     * - Projectiles (bullets, effects)\n     * - Characters (player, enemies)\n     * - Objects (collectibles, interactive elements)\n     * - HUD (health, stamina)\n     * - Preloader (loading screen)\n     * \n     * @fires Phaser.Animations.Events#ADD_ANIMATION Multiple times as animations are created\n     * @throws {Error} If required texture atlases are not loaded\n     * \n     * @see createCharacterAnimations For player animations\n     * @see createEnemyAnimations For enemy-specific animations\n     * @see createHUDAnimations For UI element animations\n     */\n    createAllAnimations() {\n        console.log('Creating all game animations...');\n\n        // Projectiles\n        this.createBulletAnimation();\n        //this.createAdditionalBulletAnimations();\n        // (Optional) this.createHitEffectAnimation();\n\n        // Characters\n        this.createCharacterAnimations();\n        this.createEnemyAnimations();\n        // this.createWarriorAnimations();\n        // this.createZapperAnimations();\n\n        // Objects / HUD / Preloader\n        this.createBitcoinAnimations();\n        this.createHUDAnimations();\n        this.createPreloaderAnimations();\n\n        console.log('All animations created successfully.');\n    }",
    "metadata": {
      "start_line": 324,
      "end_line": 349,
      "notes": "Master method for creating all animations with complete documentation and cross-references",
      "imports": [],
      "tags": ["animation_creation", "master_method", "game_animations", "phaser3", "animation_management"]
    }
  }
]
