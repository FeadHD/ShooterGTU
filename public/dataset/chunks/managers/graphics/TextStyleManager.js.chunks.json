[
    {
        "file_name": "TextStyleManager.js",
        "chunk_index": 0,
        "method": "class_definition",
        "chunk_text": "/**\n * @file\n * Text style and UI theming system for the game\n * \n * @module managers/graphics\n * @description\n * Provides a centralized system for managing text styles and visual effects:\n * - Cyberpunk-inspired color palette\n * - Retro and arcade themed fonts\n * - Neon glow and shadow effects\n * - Responsive hover animations\n * - Consistent UI element styling\n * \n * @requires Phaser.Scene\n * @requires Phaser.GameObjects.Text\n * @requires Phaser.Types.GameObjects.Text.TextStyle\n */\nexport class TextStyleManager {",
        "metadata": {
          "start_line": 1,
          "end_line": 17,
          "notes": "Class definition and module documentation for the text styling system. Outlines the manager's role in providing a centralized, theme-consistent text styling system with cyberpunk-inspired visuals and interactive effects.",
          "imports": [],
          "related_methods": [],
          "tags": ["file", "documentation", "module", "theming", "phaser3"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 1,
        "method": "constructor",
        "chunk_text": "    /**\n     * Initialize style manager for a scene\n     * @param {Scene} scene - Phaser scene to manage styles for\n     */\n    constructor(scene) {\n        this.scene = scene;\n        this.styles = this.initializeStyles();\n    }",
        "metadata": {
          "start_line": 18,
          "end_line": 25,
          "notes": "Class initializer that sets up the style manager for a specific Phaser scene. Creates an instance-level styles collection through initializeStyles for scene-specific text styling.",
          "imports": [],
          "related_methods": ["initializeStyles"],
          "tags": ["constructor", "initialization", "scene", "styles", "phaser3"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 2,
        "method": "initializeStyles",
        "chunk_text": "    /**\n     * Creates basic UI styles with consistent formatting\n     * @returns {Object} Collection of common UI styles\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} score - Score display style (24px cyan)\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} lives - Lives counter style (24px deep pink)\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} hp - Health display style (24px lime)\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} timer - Timer display style (24px magenta)\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} bitcoin - Bitcoin counter style (24px gold)\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} fps - FPS counter style (16px white)\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} wallet - Wallet display style (20px gold)\n     */\n    initializeStyles() {\n        return {\n            score: { ...TextStyleManager.baseStyles.retro, fontSize: '24px', fill: TextStyleManager.colors.score },\n            lives: { ...TextStyleManager.baseStyles.retro, fontSize: '24px', fill: TextStyleManager.colors.lives },\n            hp: { ...TextStyleManager.baseStyles.retro, fontSize: '24px', fill: TextStyleManager.colors.hp },\n            timer: { ...TextStyleManager.baseStyles.retro, fontSize: '24px', fill: TextStyleManager.colors.timer },\n            bitcoin: { ...TextStyleManager.baseStyles.retro, fontSize: '24px', fill: TextStyleManager.colors.bitcoin },\n            fps: { ...TextStyleManager.baseStyles.retro, fontSize: '16px', fill: TextStyleManager.colors.neutral },\n            wallet: { ...TextStyleManager.baseStyles.retro, fontSize: '20px', fill: TextStyleManager.colors.bitcoin }\n        };\n    }",
        "metadata": {
          "start_line": 27,
          "end_line": 41,
          "notes": "Instance method that establishes the core UI style configurations. Creates a collection of predefined styles for common game elements (score, lives, hp, etc.) by extending base styles with specific colors and sizes.",
          "imports": [],
          "related_methods": ["baseStyles", "colors", "styles"],
          "tags": ["style_creation", "initialization", "ui", "phaser3", "theming"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 3,
        "method": "baseStyles",
        "chunk_text": "    /**\n     * Base text style definitions for game themes\n     * \n     * @returns {Object} Theme-based text style configurations\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} retro - Pixel-style font with white stroke outline\n     * @property {string} retro.fontFamily - 'Retronoid, Arial'\n     * @property {string} retro.align - 'center'\n     * @property {string} retro.stroke - '#ffffff'\n     * @property {number} retro.strokeThickness - 2\n     * @property {Phaser.Types.GameObjects.Text.TextStyle} arcade - Classic arcade font style\n     * @property {string} arcade.fontFamily - 'ArcadeClassic'\n     * @property {string} arcade.align - 'center'\n     * \n     * @description\n     * Defines foundational text styles for different visual themes:\n     * \n     * Retro Theme:\n     * - Pixel-style font (Retronoid)\n     * - White stroke outline\n     * - Centered alignment\n     * \n     * Arcade Theme:\n     * - Classic arcade font\n     * - No stroke\n     * - Centered alignment\n     * \n     * @example\n     * // Extend retro style\n     * const customStyle = {\n     *   ...TextStyleManager.baseStyles.retro,\n     *   fontSize: '32px'\n     * };\n     */\n    static get baseStyles() {\n        return {\n            retro: {\n                fontFamily: 'Retronoid, Arial',\n                align: 'center',\n                stroke: '#ffffff',\n                strokeThickness: 2\n            },\n            arcade: {\n                fontFamily: 'ArcadeClassic',\n                align: 'center'\n            }\n        };\n    }",
        "metadata": {
          "start_line": 43,
          "end_line": 67,
          "notes": "Static getter providing foundational text style templates. Defines two core visual themes (retro and arcade) with specific font families and formatting rules that serve as the base for all other text styles in the game.",
          "imports": [],
          "related_methods": ["styles", "initializeStyles", "shadowEffects"],
          "tags": ["base_styles", "text_styles", "theming", "retro", "arcade", "phaser3"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 4,
        "method": "shadowEffects",
        "chunk_text": "    /**\n     * Shadow and glow effect presets\n     * \n     * @returns {Object} Shadow effect configurations\n     * @property {Object} neon - Strong glow effect for titles\n     * @property {number} neon.offsetX - 2px horizontal offset\n     * @property {number} neon.offsetY - 2px vertical offset\n     * @property {string} neon.color - '#ff00ff' (magenta)\n     * @property {number} neon.blur - 8px blur radius\n     * @property {boolean} neon.fill - true to fill shadow\n     * @property {Object} subtle - Soft shadow for UI elements\n     * @property {number} subtle.offsetX - 1px horizontal offset\n     * @property {number} subtle.offsetY - 1px vertical offset\n     * @property {string} subtle.color - '#ff00ff' (magenta)\n     * @property {number} subtle.blur - 4px blur radius\n     * @property {boolean} subtle.fill - true to fill shadow\n     * \n     * @description\n     * Predefined shadow configurations for text effects:\n     * \n     * Neon Effect:\n     * - Strong magenta glow\n     * - 8px blur radius\n     * - 2px offset\n     * - Used for titles and important UI\n     * \n     * Subtle Effect:\n     * - Soft magenta shadow\n     * - 4px blur radius\n     * - 1px offset\n     * - Used for regular UI elements\n     * \n     * @example\n     * text.setShadow(\n     *   TextStyleManager.shadowEffects.neon.offsetX,\n     *   TextStyleManager.shadowEffects.neon.offsetY,\n     *   TextStyleManager.shadowEffects.neon.color,\n     *   TextStyleManager.shadowEffects.neon.blur\n     * );\n     */",
        "metadata": {
          "start_line": 69,
          "end_line": 94,
          "notes": "Static configuration provider for text shadow and glow effects. Defines two primary effect types: 'neon' for prominent UI elements and 'subtle' for standard text, each with specific offset, blur, and color settings.",
          "imports": [],
          "related_methods": ["styles", "baseStyles"],
          "tags": ["shadow_effects", "text_effects", "visual_effects", "glow_effects", "ui_enhancement", "text_styling", "phaser3"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 5,
        "method": "colors",
        "chunk_text": "    /**\n     * Game UI color palette system\n     * \n     * @returns {Object} Color hex codes by purpose\n     * @property {string} primary - '#00ffff' (Cyan) Main UI elements\n     * @property {string} secondary - '#ff00ff' (Magenta) Highlights/accents\n     * @property {string} accent - '#ffd700' (Gold) Special items/effects\n     * @property {string} warning - '#ff0000' (Red) Danger/critical states\n     * @property {string} success - '#00ff00' (Green) Positive/completion\n     * @property {string} neutral - '#ffffff' (White) Default/inactive\n     * @property {string} score - '#00ffff' (Cyan) Score displays\n     * @property {string} lives - '#ff1493' (Deep Pink) Life counters\n     * @property {string} hp - '#00ff00' (Lime) Health indicators\n     * @property {string} bitcoin - '#ffd700' (Gold) Currency displays\n     * @property {string} timer - '#ff00ff' (Magenta) Time displays\n     * @property {string} wallet - '#40e0d0' (Turquoise) Wallet info\n     * @property {string} scene - '#9370db' (Medium Purple) Scene titles\n     * @property {string} config - '#ffffff' (White) Configuration text\n     * @property {string} pause - '#ffffff' (White) Pause menu text\n     * \n     * @description\n     * Cyberpunk-inspired color system organized by purpose:\n     * \n     * Primary Colors:\n     * - primary: #00ffff (Cyan) - Main UI elements\n     * - secondary: #ff00ff (Magenta) - Highlights/accents\n     * - accent: #ffd700 (Gold) - Special items/effects\n     * \n     * Status Colors:\n     * - warning: #ff0000 (Red) - Danger/critical states\n     * - success: #00ff00 (Green) - Positive/completion\n     * - neutral: #ffffff (White) - Default/inactive\n     * \n     * UI Element Colors:\n     * - score: #00ffff (Cyan) - Score displays\n     * - lives: #ff1493 (Deep Pink) - Life counters\n     * - hp: #00ff00 (Lime) - Health indicators\n     * - bitcoin: #ffd700 (Gold) - Currency displays\n     * - timer: #ff00ff (Magenta) - Time displays\n     * - wallet: #40e0d0 (Turquoise) - Wallet info\n     * \n     * Menu Colors:\n     * - scene: #9370db (Medium Purple) - Scene titles\n     * - config: #ffffff (White) - Configuration text\n     * - pause: #ffffff (White) - Pause menu text\n     * \n     * @example\n     * text.setColor(TextStyleManager.colors.warning); // Red alert text\n     * text.setColor(TextStyleManager.colors.success); // Green success text\n     */",
        "metadata": {
            "start_line": 96,
            "end_line": 130,
            "notes": "Static color palette system that defines the game's visual identity. Organizes colors by functional purpose (primary, status, UI elements) with specific hex values for consistent theming across all game interfaces.",
            "imports": [],
            "related_methods": ["styles", "initializeStyles"],
            "tags": ["color_palette", "ui_colors", "color_management", "theme_system", "visual_identity", "ui_design", "phaser3"]
        }
    },
    {
        "file_name": "TextStyleManager.js",
        "chunk_index": 6,
        "method": "styles_partA",
        "chunk_text": "    /**\n     * Complete style definitions for all UI elements\n     * Combines base styles, colors, and effects\n     */\n    static get styles() {\n        return {\n            // Title styles with neon effects\n            mainTitle: {\n                ...this.baseStyles.retro,\n                fontSize: '100px',\n                color: this.colors.primary,\n                shadow: this.shadowEffects.neon\n            },\n            titleShadow: (isBase = false) => ({\n                ...this.baseStyles.retro,\n                fontSize: '100px',\n                color: isBase ? '#4400ff' : this.colors.secondary\n            }),\n            missionTitle: {\n                ...this.baseStyles.retro,\n                fontSize: '48px',\n                color: this.colors.primary,\n                shadow: this.shadowEffects.subtle\n            },\n\n            // Interactive button styles\n            menuButton: {\n                ...this.baseStyles.retro,\n                fontSize: '72px',\n                color: this.colors.primary,\n                strokeThickness: 4,\n                shadow: {\n                    ...this.shadowEffects.neon,\n                    offsetX: 3,\n                    offsetY: 3,\n                    blur: 5\n                }\n            },\n            walletButton: {\n                ...this.baseStyles.retro,\n                fontSize: '32px',\n                color: this.colors.primary,\n                padding: { x: 15, y: 10 },\n                shadow: this.shadowEffects.subtle\n            },\n            pauseButton: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.pause,\n                align: 'center',\n                strokeThickness: 2,\n                shadow: {\n                    ...this.shadowEffects.neon,\n                    color: '#4a4a4a'\n                }\n            },",
        "metadata": {
          "start_line": 132,
          "end_line": 176,
          "notes": "Static getter (styles) - Part A: Defines and returns UI styles for main game titles (mainTitle, titleShadow, missionTitle) and interactive buttons (menuButton, walletButton, pauseButton). Each style combines base retro styles with specific sizes, colors, and shadow effects for consistent game theming.",
          "imports": [],
          "related_methods": ["baseStyles", "colors", "shadowEffects", "styles_partB", "styles_partC", "getStyle", "createText", "applyHoverEffect"],
          "tags": ["styles", "ui_elements", "titles", "buttons", "neon_effects", "phaser3"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 7,
        "method": "styles_partB",
        "chunk_text": "            // Game UI element styles\n            gameUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.neutral,\n                align: 'left',\n                strokeThickness: 1\n            },\n            scoreUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.score,\n                align: 'left',\n                strokeThickness: 1,\n                shadow: {\n                    ...this.shadowEffects.subtle,\n                    color: '#005555'\n                }\n            },\n            livesUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.lives,\n                align: 'left',\n                strokeThickness: 1,\n                shadow: {\n                    ...this.shadowEffects.subtle,\n                    color: '#8b0a50'\n                }\n            },\n            hpUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.hp,\n                align: 'left',\n                strokeThickness: 1,\n                shadow: {\n                    ...this.shadowEffects.subtle,\n                    color: '#006400'\n                }\n            },\n            bitcoinUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.bitcoin,\n                align: 'left',\n                strokeThickness: 1,\n                shadow: {\n                    ...this.shadowEffects.subtle,\n                    color: '#b8860b'\n                }\n            },\n            timerUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.timer,\n                align: 'left',\n                strokeThickness: 1,\n                shadow: {\n                    ...this.shadowEffects.subtle,\n                    color: '#8b008b'\n                }\n            },\n            walletUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.wallet,\n                align: 'left',\n                strokeThickness: 1,\n                shadow: {\n                    ...this.shadowEffects.subtle,\n                    color: '#20b2aa'\n                }\n            },\n            sceneUI: {\n                ...this.baseStyles.retro,\n                fontSize: '32px',\n                color: this.colors.scene,\n                align: 'center',\n                strokeThickness: 2,\n                shadow: {\n                    ...this.shadowEffects.subtle,\n                    color: '#483d8b'\n                }\n            },",
        "metadata": {
          "start_line": 178,
          "end_line": 244,
          "notes": "Static getter (styles) - Part B: General game UI element styles",
          "imports": [],
          "related_methods": ["baseStyles", "colors", "shadowEffects", "styles_partA", "styles_partC", "getStyle", "createText", "applyHoverEffect"],
          "tags": ["game_ui", "score", "lives", "timer", "wallet", "scene", "buttons", "phaser3"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 8,
        "method": "styles_partC",
        "chunk_text": "            // Special state styles\n            gameUIHighlight: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.primary,\n                align: 'left',\n                strokeThickness: 1\n            },\n            startMessage: {\n                ...this.baseStyles.retro,\n                fontSize: '48px',\n                color: this.colors.primary,\n                shadow: this.shadowEffects.subtle\n            },\n            gameOver: {\n                ...this.baseStyles.retro,\n                fontSize: '72px',\n                color: this.colors.warning,\n                shadow: this.shadowEffects.neon\n            },\n\n            // Configuration and debug styles\n            configUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.config,\n                fontFamily: 'Arial',\n                align: 'left'\n            },\n            proceduralUI: {\n                ...this.baseStyles.retro,\n                fontSize: '24px',\n                color: this.colors.config,\n                fontFamily: 'Arial',\n                align: 'left'\n            },\n            configText: {\n                ...this.baseStyles.arcade,\n                fontSize: '24px',\n                color: this.colors.neutral\n            },\n            enemyTypeText: {\n                ...this.baseStyles.arcade,\n                fontSize: '20px',\n                color: this.colors.neutral\n            }\n        };\n    }",
        "metadata": {
          "start_line": 246,
          "end_line": 283,
          "notes": "Static getter (styles) - Part C: Special states, config, debug styles, and closing braces",
          "imports": [],
          "related_methods": ["baseStyles", "colors", "shadowEffects", "styles_partA", "styles_partB", "getStyle", "createText", "applyHoverEffect"],
          "tags": ["special_states", "game_over", "config", "debug", "text_styles", "phaser3"]
        }
      },
      {
        "file_name": "TextStyleManager.js",
        "chunk_index": 9,
        "method": "getStyle",
        "chunk_text": "    /**\n     * Retrieves a style by name with fallback\n     * @param {string} styleName - Name of the style to retrieve\n     * @returns {Object} Style object or default style if not found\n     */\n    static getStyle(styleName) {\n        const style = this.styles[styleName];\n        if (!style) {\n            console.warn(`Style '${styleName}' not found in TextStyleManager`);\n            return this.styles.configText;\n        }\n        return typeof style === 'function' ? style() : { ...style };\n    }",
        "metadata": {
            "start_line": 300,
            "end_line": 312,
            "notes": "Utility method that safely retrieves and clones a named style configuration. Handles both function-based and object-based styles, with fallback to configText style if the requested style is not found.",
            "imports": [],
            "related_methods": ["styles_partA", "styles_partB", "styles_partC", "styles", "createText", "baseStyles", "colors"],
            "tags": ["style_retrieval", "fallback", "utility", "phaser3"]
        }
    },
    {
        "file_name": "TextStyleManager.js",
        "chunk_index": 10,
        "method": "applyHoverEffect",
        "chunk_text": "    /**\n     * Adds hover animation to text objects\n     * Scales up and changes color on hover\n     * @param {Phaser.GameObjects.Text} textObject - Text to make interactive\n     * @param {string} hoverColor - Color when hovered\n     * @param {string} baseColor - Default color\n     * \n     * @example\n     * // In your Phaser scene:\n     * create() {\n     *   // Create a menu button with hover effects\n     *   const menuText = this.add.text(400, 300, 'START GAME', {\n     *     ...TextStyleManager.baseStyles.retro,\n     *     fontSize: '48px',\n     *     color: TextStyleManager.colors.primary\n     *   });\n     * \n     *   // Apply hover effect with custom colors\n     *   TextStyleManager.applyHoverEffect(\n     *     menuText,\n     *     TextStyleManager.colors.warning,  // Red on hover\n     *     TextStyleManager.colors.primary   // Cyan by default\n     *   );\n     * \n     *   // Or use default hover colors\n     *   TextStyleManager.applyHoverEffect(menuText);\n     * }\n     */\n    static applyHoverEffect(textObject, hoverColor = this.colors.secondary, baseColor = this.colors.primary) {\n        if (!textObject) return;\n\n        textObject.setInteractive({ useHandCursor: true })\n            .on('pointerover', () => {\n                textObject.setScale(1.2);\n                textObject.setColor(hoverColor);\n            })\n            .on('pointerout', () => {\n                textObject.setScale(1);\n                textObject.setColor(baseColor);\n            });\n    }",
        "metadata": {
            "start_line": 314,
            "end_line": 333,
            "notes": "Static method to add hover effects to text objects, with practical examples showing both custom and default color usage in a Phaser scene",
            "imports": [],
            "related_methods": ["colors", "createText", "baseStyles"],
            "tags": ["interaction_effects", "hover_animation", "ui_feedback", "text_effects", "interactive_ui", "phaser3"]
        }
    },
    {
        "file_name": "TextStyleManager.js",
        "chunk_index": 11,
        "method": "createText",
        "chunk_text": "    /**\n     * Creates a text object with specified style\n     * @param {Scene} scene - Scene to add text to\n     * @param {number} x - X position\n     * @param {number} y - Y position\n     * @param {string} text - Text content\n     * @param {string} styleName - Name of style to use\n     * @param {number} origin - Text origin point\n     * @param {boolean} interactive - Whether to add hover effects\n     * @returns {Phaser.GameObjects.Text} Created text object\n     * \n     * @example\n     * // In your Phaser scene:\n     * create() {\n     *   // Create a dynamic score display that updates with game events\n     *   const score = TextStyleManager.createText(\n     *     this,\n     *     20,            // x left align\n     *     20,            // y top\n     *     'SCORE: 0',\n     *     'scoreUI',\n     *     0              // left-aligned origin\n     *   );\n     *   \n     *   // Update score text when player scores\n     *   this.events.on('scoreChange', (newScore) => {\n     *     score.setText(`SCORE: ${newScore}`);\n     *     // Add visual feedback for high scores\n     *     if (newScore > 1000) {\n     *       score.setColor(TextStyleManager.colors.accent);\n     *     }\n     *   });\n     * \n     *   // Create an interactive menu button with hover effects\n     *   const title = TextStyleManager.createText(\n     *     this,           // scene\n     *     400,            // x center\n     *     100,            // y position\n     *     'GAME TITLE',   // text\n     *     'mainTitle',    // style\n     *     0.5,            // centered origin\n     *     true            // interactive\n     *   );\n     * \n     *   // Create a health display that changes appearance based on value\n     *   const health = TextStyleManager.createText(\n     *     this,\n     *     20,\n     *     50,\n     *     'HP: 100',\n     *     'healthUI',\n     *     0\n     *   );\n     * \n     *   // Update health display with color-coded feedback\n     *   this.events.on('healthChange', (value) => {\n     *     health.setText(`HP: ${value}`);\n     *     if (value < 30) {\n     *       health.setColor(TextStyleManager.colors.warning);\n     *       health.setStyle({ ...TextStyleManager.getStyle('healthUI'), fontSize: '24px' });\n     *     }\n     *   });\n     * }\n     */",
        "metadata": {
            "start_line": 335,
            "end_line": 356,
            "notes": "Factory method for creating dynamic text objects that respond to game events. Demonstrates creation of interactive UI elements that update in real-time based on game state changes (scores, health, etc). Shows how to combine with Phaser's event system for dynamic updates and visual feedback. Examples include score displays that change color on milestones, health indicators with danger states, and interactive menu elements.",
            "imports": [],
            "related_methods": ["getStyle", "applyHoverEffect", "colors"],
            "tags": ["text_creation", "ui_factory", "interactive_text", "text_styling", "ui_design", "dynamic_updates", "event_driven", "state_management", "phaser3"]
        }
    }
]