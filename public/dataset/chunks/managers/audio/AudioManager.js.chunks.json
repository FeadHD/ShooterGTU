[
  {
    "file_name": "AudioManager.js",
    "chunk_index": 0,
    "method": "imports",
    "chunk_text": "import { BaseManager } from '../core/BaseManager';\nimport { container } from '../core/ServiceContainer';\nimport { GameEvents } from '../events/GameEvents';",
    "metadata": {
      "start_line": 1,
      "end_line": 3,
      "notes": "Imports core dependencies for audio management system",
      "imports": [
        "BaseManager",
        "ServiceContainer.container",
        "GameEvents"
      ],
      "tags": [
        "imports",
        "core_system",
        "audio_system",
        "dependency_injection"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 1, "method": "classDefinition"},
        {"file_name": "AudioManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 1,
    "method": "classDefinition",
    "chunk_text": "/**\n * AudioManager.js\n * Manages game audio playback and settings\n * Extends BaseManager for core functionality\n *\n * @class AudioManager\n * @extends BaseManager\n * @description\n * Handles:\n * - Sound effect playback\n * - Background music\n * - Volume control\n * - Audio caching\n * - Dynamic audio loading\n *\n * @requires Phaser.Scene\n * @requires Phaser.Sound.BaseSoundManager\n * @requires BaseManager\n */\nexport class AudioManager extends BaseManager {",
    "metadata": {
      "start_line": 5,
      "end_line": 23,
      "notes": "Defines audio manager class for handling game sound effects and music",
      "imports": [
        "Phaser.Scene",
        "Phaser.Sound.BaseSoundManager",
        "BaseManager"
      ],
      "tags": [
        "class_definition",
        "core_system",
        "audio_system",
        "game_feedback"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 0, "method": "imports"},
        {"file_name": "AudioManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 2,
    "method": "constructor",
    "chunk_text": "    /**\n     * Initialize audio manager\n     * @param {Phaser.Scene} scene - Scene this manager belongs to\n     * \n     * @description\n     * Sets up:\n     * - Sound cache\n     * - Default volumes\n     * - Audio categories\n     * - Event listeners\n     * \n     * @requires Phaser.Scene\n     */\n    constructor(scene) {\n        super(scene);\n        \n        // Initialize sound cache\n        this.sounds = new Map();\n        \n        // Default configuration\n        this.config = {\n            music: {\n                volume: 0.5,\n                fadeTime: 1000\n            },\n            sfx: {\n                volume: 0.8,\n                pool: 4\n            }\n        };\n        \n        // Register with container\n        container.register('audio', this);\n        \n        // Bind event listeners\n        this.scene.events.on(GameEvents.LEVEL_COMPLETE, this.onLevelComplete, this);\n        this.scene.events.on(GameEvents.GAME_OVER, this.onGameOver, this);\n    }",
    "metadata": {
      "start_line": 25,
      "end_line": 56,
      "notes": "Initializes audio manager with sound cache and default settings",
      "imports": [
        "Phaser.Scene",
        "Phaser.Sound.BaseSoundManager",
        "ServiceContainer.container",
        "GameEvents"
      ],
      "tags": [
        "initialization",
        "core_system",
        "audio_system",
        "configuration"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 1, "method": "classDefinition"},
        {"file_name": "AudioManager.js", "chunk_index": 3, "method": "initialize"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 3,
    "method": "initialize",
    "chunk_text": "    /**\n     * Initialize audio system\n     * Sets up initial audio state and loads default sounds\n     * \n     * @description\n     * Performs:\n     * - Default sound loading\n     * - Volume initialization\n     * - Audio pool setup\n     * - Cache preparation\n     */\n    initialize() {\n        console.log('Initializing audio system...');\n        \n        // Set initial volumes\n        this.scene.sound.setVolume(this.config.sfx.volume);\n        \n        // Prepare audio pools\n        this.prepareSoundPools();\n        \n        console.log('Audio system initialized.');\n    }",
    "metadata": {
      "start_line": 58,
      "end_line": 77,
      "notes": "Sets up initial audio state and prepares sound system",
      "imports": [
        "Phaser.Sound.BaseSoundManager"
      ],
      "tags": [
        "initialization",
        "core_system",
        "audio_system",
        "setup"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 2, "method": "constructor"},
        {"file_name": "AudioManager.js", "chunk_index": 4, "method": "add"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 4,
    "method": "add",
    "chunk_text": "    /**\n     * Add a new sound to the audio manager\n     * @param {string} key - Sound identifier\n     * @param {Object} [config] - Sound configuration\n     * @param {number} [config.volume=1] - Sound volume (0-1)\n     * @param {boolean} [config.loop=false] - Loop playback\n     * @param {number} [config.rate=1] - Playback rate\n     * \n     * @description\n     * Registers sound with:\n     * - Volume control\n     * - Loop settings\n     * - Rate adjustment\n     * - Cache management\n     */\n    add(key, config = {}) {\n        // Set default config\n        const defaultConfig = {\n            volume: 1,\n            loop: false,\n            rate: 1\n        };\n        \n        // Create and store sound\n        const sound = this.scene.sound.add(key, {\n            ...defaultConfig,\n            ...config\n        });\n        \n        this.sounds.set(key, sound);\n    }",
    "metadata": {
      "start_line": 79,
      "end_line": 106,
      "notes": "Adds and configures new sound instance in audio manager",
      "imports": [
        "Phaser.Sound.BaseSoundManager",
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "initialization",
        "configuration"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 3, "method": "initialize"},
        {"file_name": "AudioManager.js", "chunk_index": 5, "method": "play"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 5,
    "method": "play",
    "chunk_text": "    /**\n     * Play a registered sound\n     * @param {string} key - Sound identifier\n     * @param {Object} [config] - Playback configuration\n     * @param {number} [config.volume] - Override volume\n     * @param {boolean} [config.loop] - Override loop\n     * @param {number} [config.rate] - Override rate\n     * \n     * @description\n     * Plays sound with:\n     * - Runtime configuration\n     * - Volume control\n     * - Loop settings\n     * - Rate adjustment\n     * \n     * @returns {Phaser.Sound.BaseSound} Sound instance\n     */\n    play(key, config = {}) {\n        const sound = this.sounds.get(key);\n        if (!sound) return null;\n        \n        // Apply runtime config\n        if (config.volume !== undefined) sound.setVolume(config.volume);\n        if (config.loop !== undefined) sound.setLoop(config.loop);\n        if (config.rate !== undefined) sound.setRate(config.rate);\n        \n        sound.play(config);\n        return sound;\n    }",
    "metadata": {
      "start_line": 108,
      "end_line": 135,
      "notes": "Plays registered sound with configurable runtime settings",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "playback",
        "game_feedback"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 4, "method": "add"},
        {"file_name": "AudioManager.js", "chunk_index": 6, "method": "stop"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 6,
    "method": "stop",
    "chunk_text": "    /**\n     * Stop sound playback\n     * @param {string} [key] - Sound to stop (stops all if omitted)\n     * \n     * @description\n     * Stops playback with:\n     * - Single sound stop\n     * - All sounds stop\n     * - State cleanup\n     * - Resource release\n     */\n    stop(key) {\n        if (key) {\n            // Stop specific sound\n            const sound = this.sounds.get(key);\n            if (sound) sound.stop();\n        } else {\n            // Stop all sounds\n            this.sounds.forEach(sound => sound.stop());\n        }\n    }",
    "metadata": {
      "start_line": 137,
      "end_line": 156,
      "notes": "Stops playback of specified sound or all sounds",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "playback",
        "cleanup"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 5, "method": "play"},
        {"file_name": "AudioManager.js", "chunk_index": 7, "method": "mute"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 7,
    "method": "mute",
    "chunk_text": "    /**\n     * Mute all audio\n     * \n     * @description\n     * Mutes system with:\n     * - SFX pause\n     * - Music pause\n     * - State tracking\n     * - Volume preservation\n     */\n    mute() {\n        this.isMuted = true;\n        \n        // Pause all sounds\n        this.sounds.forEach(sound => {\n            if (sound.isPlaying) {\n                sound.pause();\n            }\n        });\n        \n        // Pause music\n        if (this.currentMusic?.isPlaying) {\n            this.currentMusic.pause();\n        }\n    }",
    "metadata": {
      "start_line": 158,
      "end_line": 180,
      "notes": "Mutes all audio while preserving state",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "state_management"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 6, "method": "stop"},
        {"file_name": "AudioManager.js", "chunk_index": 8, "method": "unmute"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 8,
    "method": "unmute",
    "chunk_text": "    /**\n     * Resume all previously playing audio\n     * \n     * @description\n     * Unmutes system with:\n     * - SFX resume\n     * - Music resume\n     * - State restoration\n     * - Volume restoration\n     */\n    unmute() {\n        this.isMuted = false;\n        \n        // Resume sounds\n        this.sounds.forEach(sound => {\n            if (sound.isPaused) {\n                sound.resume();\n            }\n        });\n        \n        // Resume music\n        if (this.currentMusic?.isPaused) {\n            this.currentMusic.resume();\n        }\n    }",
    "metadata": {
      "start_line": 182,
      "end_line": 204,
      "notes": "Unmutes all audio and restores previous state",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "state_management"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 7, "method": "mute"},
        {"file_name": "AudioManager.js", "chunk_index": 9, "method": "_updateAllSoundVolumes"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 9,
    "method": "_updateAllSoundVolumes",
    "chunk_text": "    /**\n     * Update volume for all sound effects\n     * @private\n     * \n     * @description\n     * Updates volume with:\n     * - Global volume sync\n     * - Individual sound update\n     * - State verification\n     * - Volume normalization\n     */\n    _updateAllSoundVolumes() {\n        // Update all sound volumes\n        this.sounds.forEach(sound => {\n            sound.setVolume(this.soundVolume);\n        });\n    }",
    "metadata": {
      "start_line": 206,
      "end_line": 223,
      "notes": "Private method to update volume levels across all sounds",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "utility"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 8, "method": "unmute"},
        {"file_name": "AudioManager.js", "chunk_index": 10, "method": "getSoundVolume"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 10,
    "method": "getSoundVolume",
    "chunk_text": "    /**\n     * Get current sound effects volume\n     * @returns {number} Current volume (0-1)\n     * \n     * @description\n     * Retrieves volume with:\n     * - Normalized value\n     * - Range validation\n     * - State verification\n     * - Current settings\n     */\n    getSoundVolume() {\n        return this.soundVolume;\n    }",
    "metadata": {
      "start_line": 225,
      "end_line": 239,
      "notes": "Returns current sound effects volume level",
      "imports": [],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "getter"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 9, "method": "_updateAllSoundVolumes"},
        {"file_name": "AudioManager.js", "chunk_index": 11, "method": "getMusicVolume"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 11,
    "method": "getMusicVolume",
    "chunk_text": "    /**\n     * Get current music volume\n     * @returns {number} Current volume (0-1)\n     * \n     * @description\n     * Retrieves volume with:\n     * - Normalized value\n     * - Range validation\n     * - State verification\n     * - Current settings\n     */\n    getMusicVolume() {\n        return this.musicVolume;\n    }",
    "metadata": {
      "start_line": 241,
      "end_line": 255,
      "notes": "Returns current background music volume level",
      "imports": [],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "getter"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 10, "method": "getSoundVolume"},
        {"file_name": "AudioManager.js", "chunk_index": 12, "method": "playMusic"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 12,
    "method": "playMusic",
    "chunk_text": "    /**\n     * Play background music track\n     * @param {string} key - Asset key for music track\n     * @param {Object} [config] - Music configuration\n     * @param {boolean} [config.loop=true] - Loop track\n     * @param {number} [config.volume] - Override volume\n     * \n     * @description\n     * Plays music with:\n     * - Track switching\n     * - Volume control\n     * - Loop settings\n     * - State tracking\n     */\n    playMusic(key, config = {}) {\n        // Check if already playing\n        if (this.currentMusic?.key === key && this.currentMusic.isPlaying) {\n            this.currentMusic.setVolume(this.musicVolume);\n            return;\n        }\n        \n        // Stop current music\n        this.stopMusic();\n        \n        // Create and configure new track\n        this.currentMusic = this.scene.sound.add(key, {\n            loop: true,\n            volume: this.musicVolume,\n            ...config\n        });\n        \n        // Start if not muted\n        if (!this.isMuted) {\n            this.currentMusic.play();\n        }\n    }",
    "metadata": {
      "start_line": 257,
      "end_line": 291,
      "notes": "Plays background music track with configuration options",
      "imports": [
        "Phaser.Sound.BaseSoundManager",
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "music",
        "playback"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 11, "method": "getMusicVolume"},
        {"file_name": "AudioManager.js", "chunk_index": 13, "method": "setVolume"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 13,
    "method": "setVolume",
    "chunk_text": "    /**\n     * Set volume for specific sound\n     * @param {string} key - Sound identifier\n     * @param {number} volume - Target volume (0-1)\n     * \n     * @description\n     * Sets volume with:\n     * - Range validation\n     * - Instance lookup\n     * - Volume normalization\n     * - State update\n     * \n     * @returns {boolean} Success state\n     */\n    setVolume(key, volume) {\n        const sound = this.sounds.get(key);\n        if (!sound) return false;\n        \n        // Normalize and set volume\n        volume = Math.max(0, Math.min(1, volume));\n        sound.setVolume(volume);\n        return true;\n    }",
    "metadata": {
      "start_line": 293,
      "end_line": 317,
      "notes": "Sets volume for individual sound instance",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "instance_management"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 12, "method": "playMusic"},
        {"file_name": "AudioManager.js", "chunk_index": 14, "method": "setSoundVolume"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 14,
    "method": "setSoundVolume",
    "chunk_text": "    /**\n     * Set global sound effects volume\n     * @param {number} volume - Target volume (0-1)\n     * @param {Object} [options] - Volume options\n     * @param {boolean} [options.persist=true] - Save to storage\n     * @param {boolean} [options.updateExisting=true] - Update playing\n     * \n     * @description\n     * Sets volume with:\n     * - Global control\n     * - Persistence options\n     * - Runtime updates\n     * - State management\n     */\n    setSoundVolume(volume, options = {}) {\n        // Normalize volume\n        volume = Math.max(0, Math.min(1, volume));\n        this.soundVolume = volume;\n        \n        // Update playing sounds\n        if (options.updateExisting !== false) {\n            this.sounds.forEach(sound => {\n                if (!sound.isMusic) {\n                    sound.setVolume(volume);\n                }\n            });\n        }\n        \n        // Persist settings\n        if (options.persist !== false) {\n            localStorage.setItem('soundVolume', volume.toString());\n        }\n    }",
    "metadata": {
      "start_line": 319,
      "end_line": 352,
      "notes": "Sets global volume for all sound effects",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "global_settings"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 13, "method": "setVolume"},
        {"file_name": "AudioManager.js", "chunk_index": 15, "method": "setMusicVolume"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 15,
    "method": "setMusicVolume",
    "chunk_text": "    /**\n     * Set global music volume\n     * @param {number} volume - Target volume (0-1)\n     * @param {Object} [options] - Volume options\n     * @param {boolean} [options.persist=true] - Save to storage\n     * @param {boolean} [options.updateExisting=true] - Update playing\n     * @param {number} [options.fadeDuration] - Fade duration ms\n     * \n     * @description\n     * Sets volume with:\n     * - Global control\n     * - Fade transitions\n     * - Persistence options\n     * - State management\n     */\n    setMusicVolume(volume, options = {}) {\n        // Normalize volume\n        volume = Math.max(0, Math.min(1, volume));\n        this.musicVolume = volume;\n        \n        // Update playing music\n        if (options.updateExisting !== false) {\n            this.sounds.forEach(sound => {\n                if (sound.isMusic) {\n                    if (options.fadeDuration) {\n                        sound.setVolume(volume, { duration: options.fadeDuration });\n                    } else {\n                        sound.setVolume(volume);\n                    }\n                }\n            });\n        }\n        \n        // Persist settings\n        if (options.persist !== false) {\n            localStorage.setItem('musicVolume', volume.toString());\n        }\n    }",
    "metadata": {
      "start_line": 354,
      "end_line": 391,
      "notes": "Sets global volume for all music tracks with fade support",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "volume_control",
        "global_settings"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 14, "method": "setSoundVolume"},
        {"file_name": "AudioManager.js", "chunk_index": 16, "method": "playBackgroundMusic"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 16,
    "method": "playBackgroundMusic",
    "chunk_text": "    /**\n     * Play looping background music\n     * @param {string} trackKey - Music track key\n     * \n     * @description\n     * Plays music with:\n     * - Auto-looping\n     * - Volume control\n     * - State tracking\n     * - Previous track cleanup\n     */\n    playBackgroundMusic(trackKey) {\n        this.playMusic(trackKey, { loop: true });\n    }",
    "metadata": {
      "start_line": 393,
      "end_line": 408,
      "notes": "Convenience method for playing looped background music",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "music",
        "convenience"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 15, "method": "setMusicVolume"},
        {"file_name": "AudioManager.js", "chunk_index": 17, "method": "stopMusic"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 17,
    "method": "stopMusic",
    "chunk_text": "    /**\n     * Stop current music track\n     * \n     * @description\n     * Stops music with:\n     * - Playback halt\n     * - Resource cleanup\n     * - State reset\n     * - Memory management\n     */\n    stopMusic() {\n        if (this.currentMusic) {\n            this.currentMusic.stop();\n            this.currentMusic.destroy();\n            this.currentMusic = null;\n        }\n    }",
    "metadata": {
      "start_line": 410,
      "end_line": 428,
      "notes": "Stops and cleans up current background music",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "music",
        "cleanup"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 16, "method": "playBackgroundMusic"},
        {"file_name": "AudioManager.js", "chunk_index": 18, "method": "stopAll"}
      ]
    }
  },
  {
    "file_name": "AudioManager.js",
    "chunk_index": 18,
    "method": "stopAll",
    "chunk_text": "    /**\n     * Stop all sound effects\n     * \n     * @description\n     * Stops all with:\n     * - SFX cleanup\n     * - State reset\n     * - Resource release\n     * - Memory cleanup\n     */\n    stopAll() {\n        this.sounds.forEach(sound => {\n            sound.stop();\n        });\n    }",
    "metadata": {
      "start_line": 430,
      "end_line": 445,
      "notes": "Stops all currently playing sound effects",
      "imports": [
        "Phaser.Sound.BaseSound"
      ],
      "tags": [
        "core_system",
        "audio_system",
        "cleanup",
        "resource_management"
      ],
      "related_chunks": [
        {"file_name": "AudioManager.js", "chunk_index": 17, "method": "stopMusic"}
      ]
    }
  }
]
