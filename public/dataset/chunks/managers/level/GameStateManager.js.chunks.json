[
    {
      "file_name": "GameStateManager.js",
      "chunk_index": 0,
      "method": "class_definition",
      "chunk_text": "/**\n * GameStateManager.js\n * Centralizes game state using Phaser's registry + event bus for communication.\n * Also supports optional local storage, state change listeners, etc.\n *\n * @class GameStateManager\n * @extends BaseManager\n * @description\n * Manages and tracks game state for various aspects of gameplay.\n * Provides methods for state initialization, retrieval, updates, and persistence.\n *\n * @requires Phaser.Scene\n * @requires Phaser.Events.EventEmitter\n * @requires GameConfig\n * @requires EventManager\n */\n\nimport { GameConfig } from '../../config/GameConfig';\nimport { BaseManager } from '../core/BaseManager';\nimport { GameEvents } from '../core/EventManager';\n\nexport class GameStateManager extends BaseManager {",
      "metadata": {
        "start_line": 1,
        "end_line": 18,
        "notes": "Defines core game state management system",
        "imports": [
          "Phaser.Scene"
        ],
        "tags": [
          "class_definition",
          "game_state",
          "core_system"
        ],
        "related_chunks": [
          {"file_name": "GameStateManager.js", "chunk_index": 1, "method": "constructor"},
          {"file_name": "GameStateManager.js", "chunk_index": 2, "method": "initializeGameState"}
        ]
      }
    },
    {
      "file_name": "GameStateManager.js",
      "chunk_index": 1,
      "method": "constructor",
      "chunk_text": "    /**\n     * @param {Phaser.Scene} scene - The scene that owns this manager\n     *\n     * @description\n     * Initializes the GameStateManager with scene reference and access to\n     * Phaser's registry and event manager for game state management.\n     *\n     * @returns {void}\n     */\n    constructor(scene) {\n        super();\n        this.scene = scene;\n        this.registry = scene.registry;\n        this.events = scene.events;\n        this.eventManager = scene.eventManager;\n    }",
      "metadata": {
        "start_line": 20,
        "end_line": 35,
        "notes": "Initializes game state manager with scene context, registry access, and event system setup",
        "imports": [
          "Phaser.Scene",
          "Phaser.Data.DataManager",
          "Phaser.Events.EventEmitter"
        ],
        "tags": [
          "constructor",
          "initialization",
          "scene_setup",
          "state_management",
          "event_system",
          "core_system"
        ],
        "related_chunks": [
          {"file_name": "GameStateManager.js", "chunk_index": 0, "method": "class_definition"},
          {"file_name": "GameStateManager.js", "chunk_index": 2, "method": "initializeGameState"}
        ]
      }
    },
    {
      "file_name": "GameStateManager.js",
      "chunk_index": 2,
      "method": "initializeGameState",
      "chunk_text": "    /**\n     * Initialize default game state values (if not already set).\n     * Emits 'gameStateInitialized' once done.\n     *\n     * @description\n     * Sets default values for score, lives, health, etc., if not already set.\n     * Emits a GAME_STATE_INITIALIZED event once the initialization is complete.\n     *\n     * @returns {void}\n     */\n    initializeGameState() {\n        const defaults = {\n            score: GameConfig.UI?.INITIAL_SCORE ?? 0,\n            lives: GameConfig.UI?.DEFAULT_LIVES ?? 3,\n            playerHP: GameConfig.PLAYER?.INITIAL_HP ?? 100,\n            bitcoins: GameConfig.UI?.INITIAL_COINS ?? 0,\n            musicEnabled: true,\n            gameStarted: false,\n            stamina: 100\n        };\n        Object.entries(defaults).forEach(([key, value]) => {\n            if (!this.registry.has(key)) {\n                this.registry.set(key, value);\n            }\n        });\n        this.eventManager.emit(GameEvents.GAME_STATE_INITIALIZED, defaults);\n    }",
      "metadata": {
        "start_line": 37,
        "end_line": 67,
        "notes": "Sets up initial game state with default values from GameConfig and emits initialization event",
        "imports": [
          "Phaser.Data.DataManager",
          "../../config/GameConfig",
          "../core/EventManager"
        ],
        "tags": [
          "initialization",
          "state_setup",
          "event_emission",
          "core_system",
          "game_config"
        ],
        "related_chunks": [
          {"file_name": "GameStateManager.js", "chunk_index": 1, "method": "constructor"},
          {"file_name": "GameStateManager.js", "chunk_index": 4, "method": "set"},
          {"file_name": "GameStateManager.js", "chunk_index": 7, "method": "reset"}
        ]
      }
    },
    {
      "file_name": "GameStateManager.js",
      "chunk_index": 3,
      "method": "get",
      "chunk_text": "    /**\n     * Get a value from Phaser's registry\n     * @param {string} key - The state key\n     * @returns {any} The current value\n     *\n     * @description\n     * Retrieves the current value associated with the provided key from the registry.\n     *\n     * @returns {any} The value for the given key.\n     */\n    get(key) {\n        return this.registry.get(key);\n    }",
      "metadata": {
        "start_line": 49,
        "end_line": 56,
        "notes": "Retrieves state value from Phaser registry by key",
        "imports": ["Phaser.Data.DataManager"],
        "tags": ["get", "state_retrieval", "helper_method", "core_system"],
        "related_chunks": [
          {"file_name": "GameStateManager.js", "chunk_index": 4, "method": "set"},
          {"file_name": "GameStateManager.js", "chunk_index": 5, "method": "increment"},
          {"file_name": "GameStateManager.js", "chunk_index": 6, "method": "decrement"}
        ]
      }
    },
    {
      "file_name": "GameStateManager.js",
      "chunk_index": 4,
      "method": "set",
      "chunk_text": "    /**\n     * Set a value in Phaser's registry + emit 'stateChanged'\n     * @param {string} key - The state key\n     * @param {any} value - New value\n     *\n     * @description\n     * Sets the new value for a given key in the registry and emits the stateChanged event.\n     * This helps keep track of game state changes and notifies other systems.\n     *\n     * @returns {void}\n     */\n    set(key, value) {\n        console.log(`[GameStateManager] set(): Updating ${key} to`, value);\n        this.registry.set(key, value);\n        this.eventManager.emit(GameEvents.STATE_CHANGED, { key, value });\n    }",
      "metadata": {
        "start_line": 83,
        "end_line": 105,
        "notes": "Updates state value in registry and emits state change event",
        "imports": [
          "Phaser.Data.DataManager",
          "../core/EventManager"
        ],
        "tags": [
          "set",
          "state_update",
          "event_emission",
          "core_system"
        ],
        "related_chunks": [
          {"file_name": "GameStateManager.js", "chunk_index": 3, "method": "get"},
          {"file_name": "GameStateManager.js", "chunk_index": 5, "method": "increment"},
          {"file_name": "GameStateManager.js", "chunk_index": 6, "method": "decrement"},
          {"file_name": "GameStateManager.js", "chunk_index": 7, "method": "reset"}
        ]
      }
    },
    {
      "file_name": "GameStateManager.js",
      "chunk_index": 5,
      "method": "increment",
      "chunk_text": "    /**\n     * Increase a numeric state value\n     * @param {string} key - The state key\n     * @param {number} amount - Amount to increase (default 1)\n     *\n     * @description\n     * Increments the value of a numeric state key by a specified amount.\n     * The default increment value is 1.\n     *\n     * @returns {void}\n     */\n    increment(key, amount = 1) {\n        const currentValue = this.get(key) || 0;\n        this.set(key, currentValue + amount);\n    }",
      "metadata": {
        "start_line": 107,
        "end_line": 119,
        "notes": "Increments numeric state value by specified amount",
        "imports": ["Phaser.Data.DataManager"],
        "tags": [
          "increment",
          "state_update",
          "helper_method",
          "numeric_operation"
        ],
        "related_chunks": [
          {"file_name": "GameStateManager.js", "chunk_index": 3, "method": "get"},
          {"file_name": "GameStateManager.js", "chunk_index": 4, "method": "set"}
        ]
      }
    },
    {
        "file_name": "GameStateManager.js",
        "chunk_index": 6,
        "method": "decrement",
        "chunk_text": "    /**\n     * Decrease a numeric state value (clamped at 0)\n     * @param {string} key - The state key\n     * @param {number} amount - Amount to decrease (default 1)\n     *\n     * @description\n     * Decrements a numeric state value by a specified amount, ensuring it doesn't go below 0.\n     * The default decrement value is 1.\n     *\n     * @returns {void}\n     */\n    decrement(key, amount = 1) {\n        const currentValue = this.get(key) || 0;\n        const newValue = Math.max(0, currentValue - amount);\n        this.set(key, newValue);\n    }",
        "metadata": {
          "start_line": 121,
          "end_line": 133,
          "notes": "Decrements numeric state value with zero bound protection",
          "imports": ["Phaser.Data.DataManager"],
          "tags": [
            "decrement",
            "state_update",
            "helper_method",
            "numeric_operation",
            "bounds_check"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 3, "method": "get"},
            {"file_name": "GameStateManager.js", "chunk_index": 4, "method": "set"}
          ]
        }
      },
      {
        "file_name": "GameStateManager.js",
        "chunk_index": 7,
        "method": "reset",
        "chunk_text": "    /**\n     * Reset single key or entire game state to default values\n     * @param {string} [key] - If provided, only reset that key\n     *\n     * @description\n     * Resets the value of a specific state key or the entire game state to its default values.\n     *\n     * @returns {void}\n     */\n    reset(key) {\n        const defaults = {\n            score: GameConfig.UI?.INITIAL_SCORE ?? 0,\n            lives: GameConfig.UI?.DEFAULT_LIVES ?? 3,\n            playerHP: GameConfig.PLAYER?.INITIAL_HP ?? 100,\n            bitcoins: GameConfig.UI?.INITIAL_COINS ?? 0,\n            musicEnabled: true,\n            gameStarted: false,\n            stamina: 100\n        };\n        if (key) {\n            this.set(key, defaults[key]);\n        } else {\n            Object.entries(defaults).forEach(([k, value]) => {\n                this.set(k, value);\n            });\n        }\n    }",
        "metadata": {
          "start_line": 135,
          "end_line": 168,
          "notes": "Resets game state to default values from GameConfig, either single key or all",
          "imports": [
            "Phaser.Data.DataManager",
            "../../config/GameConfig"
          ],
          "tags": [
            "reset",
            "state_reset",
            "core_system",
            "game_config",
            "state_management"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 2, "method": "initializeGameState"},
            {"file_name": "GameStateManager.js", "chunk_index": 4, "method": "set"}
          ]
        }
      },
      {
        "file_name": "GameStateManager.js",
        "chunk_index": 8,
        "method": "registerListener",
        "chunk_text": "    /**\n     * Register a callback for state changes\n     * @param {string} key - The state key to watch\n     * @param {Function} callback - Function to call on changes\n     *\n     * @description\n     * Registers a callback function to be called whenever the specified state key changes.\n     * The callback receives both the new and old values.\n     *\n     * @returns {void}\n     */\n    registerListener(key, callback) {\n        this.registry.events.on(`changedata-${key}`, (parent, value, previousValue) => {\n            callback(value, previousValue);\n        });\n    }",
        "metadata": {
          "start_line": 170,
          "end_line": 185,
          "notes": "Sets up state change listener for specific key with value comparison",
          "imports": [
            "Phaser.Data.DataManager",
            "Phaser.Events.EventEmitter"
          ],
          "tags": [
            "event_listener",
            "state_change",
            "callback_registration",
            "event_system"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 4, "method": "set"},
            {"file_name": "GameStateManager.js", "chunk_index": 9, "method": "removeListener"}
          ]
        }
      },
      {
        "file_name": "GameStateManager.js",
        "chunk_index": 9,
        "method": "removeListener",
        "chunk_text": "    /**\n     * Remove a state change listener\n     * @param {string} key - The state key to unwatch\n     * @param {Function} callback - Function to remove\n     *\n     * @description\n     * Removes a previously registered callback function for state changes.\n     * Both the key and callback must match the original registration.\n     *\n     * @returns {void}\n     */\n    removeListener(key, callback) {\n        this.registry.events.off(`changedata-${key}`, callback);\n    }",
        "metadata": {
          "start_line": 187,
          "end_line": 201,
          "notes": "Removes state change listener for specific key and callback",
          "imports": [
            "Phaser.Data.DataManager",
            "Phaser.Events.EventEmitter"
          ],
          "tags": [
            "event_listener",
            "state_change",
            "callback_removal",
            "event_system",
            "cleanup"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 8, "method": "registerListener"}
          ]
        }
      },
      {
        "file_name": "GameStateManager.js",
        "chunk_index": 10,
        "method": "saveToLocalStorage",
        "chunk_text": "    /**\n     * Save current game state to localStorage\n     * @param {string} [key] - Optional specific key to save\n     *\n     * @description\n     * Saves either a specific state value or the entire game state to localStorage.\n     * Uses JSON serialization for storage.\n     *\n     * @returns {void}\n     */\n    saveToLocalStorage(key) {\n        if (key) {\n            localStorage.setItem(key, JSON.stringify(this.get(key)));\n        } else {\n            const state = {};\n            this.registry.getAll().forEach((value, key) => {\n                state[key] = value;\n            });\n            localStorage.setItem('gameState', JSON.stringify(state));\n        }\n    }",
        "metadata": {
          "start_line": 203,
          "end_line": 223,
          "notes": "Persists game state to localStorage with JSON serialization",
          "imports": [
            "Phaser.Data.DataManager",
            "localStorage",
            "JSON"
          ],
          "tags": [
            "persistence",
            "state_storage",
            "serialization",
            "core_system",
            "local_storage"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 3, "method": "get"},
            {"file_name": "GameStateManager.js", "chunk_index": 11, "method": "loadFromLocalStorage"}
          ]
        }
      },
      {
        "file_name": "GameStateManager.js",
        "chunk_index": 11,
        "method": "loadFromLocalStorage",
        "chunk_text": "    /**\n     * Load game state from localStorage\n     * @param {string} [key] - Optional specific key to load\n     *\n     * @description\n     * Loads either a specific state value or the entire game state from localStorage.\n     * Uses JSON parsing and handles missing data gracefully.\n     *\n     * @returns {void}\n     */\n    loadFromLocalStorage(key) {\n        if (key) {\n            const value = localStorage.getItem(key);\n            if (value !== null) {\n                this.set(key, JSON.parse(value));\n            }\n        } else {\n            const state = localStorage.getItem('gameState');\n            if (state !== null) {\n                const parsed = JSON.parse(state);\n                Object.entries(parsed).forEach(([key, value]) => {\n                    this.set(key, value);\n                });\n            }\n        }\n    }",
        "metadata": {
          "start_line": 225,
          "end_line": 250,
          "notes": "Loads game state from localStorage with error handling",
          "imports": [
            "Phaser.Data.DataManager",
            "localStorage",
            "JSON"
          ],
          "tags": [
            "persistence",
            "state_loading",
            "deserialization",
            "core_system",
            "local_storage",
            "error_handling"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 4, "method": "set"},
            {"file_name": "GameStateManager.js", "chunk_index": 10, "method": "saveToLocalStorage"}
          ]
        }
      },
      {
        "file_name": "GameStateManager.js",
        "chunk_index": 12,
        "method": "clearSavedState",
        "chunk_text": "    /**\n     * Clear saved game state from local storage\n     *\n     * @description\n     * Clears the saved game state from the browser's local storage.\n     *\n     * @returns {void}\n     */\n    clearSavedState() {\n        localStorage.removeItem('gameState');\n    }",
        "metadata": {
          "start_line": 233,
          "end_line": 241,
          "notes": "Removes all persisted game state data from localStorage",
          "imports": ["localStorage"],
          "tags": [
            "persistence",
            "state_clearance",
            "local_storage",
            "cleanup",
            "core_system"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 10, "method": "saveToLocalStorage"},
            {"file_name": "GameStateManager.js", "chunk_index": 11, "method": "loadFromLocalStorage"}
          ]
        }
      },
      {
        "file_name": "GameStateManager.js",
        "chunk_index": 13,
        "method": "handleGameOver",
        "chunk_text": "    /**\n     * Trigger game over logic\n     * Currently just emits 'gameOver' event, which Scenes can listen for.\n     *\n     * @description\n     * Emitting the GAME_OVER event to signal that the game is over.\n     * Can be expanded with additional game-over logic.\n     *\n     * @returns {void}\n     */\n    handleGameOver() {\n        console.log('[GameStateManager] handleGameOver(): Game Over triggered');\n        this.eventManager.emit(GameEvents.GAME_OVER);\n    }",
        "metadata": {
          "start_line": 243,
          "end_line": 256,
          "notes": "Triggers game over state and emits event for scene handling",
          "imports": [
            "Phaser.Events.EventEmitter",
            "../core/EventManager"
          ],
          "tags": [
            "game_over",
            "event_emission",
            "core_system",
            "game_state",
            "state_management"
          ],
          "related_chunks": [
            {"file_name": "GameStateManager.js", "chunk_index": 7, "method": "reset"},
            {"file_name": "GameStateManager.js", "chunk_index": 8, "method": "registerListener"}
          ]
        }
      }
  ]