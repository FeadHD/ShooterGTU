[
    {
      "file_name": "PersistenceManager.js",
      "chunk_index": 0,
      "method": "class_definition",
      "chunk_text": "/**\n * Manages game state persistence using browser's localStorage\n * Handles saving, loading, and clearing game state data\n */\nexport class PersistenceManager {",
      "metadata": {
        "start_line": 1,
        "end_line": 5,
        "notes": "Defines core persistence system for game state management. Implements browser's localStorage API for data persistence. Provides interface for saving, loading, and clearing game progress data.",
        "imports": [
          "GameStateManager",
          "localStorage",
          "JSON"
        ],
        "tags": [
          "class_definition",
          "persistence_manager",
          "local_storage",
          "core_system",
          "data_management",
          "game_state",
          "browser_storage",
          "state_persistence",
          "initialization"
        ],
        "related_chunks": [
          {"file_name": "PersistenceManager.js", "chunk_index": 1, "method": "constructor"},
          {"file_name": "PersistenceManager.js", "chunk_index": 2, "method": "saveToLocalStorage"},
          {"file_name": "PersistenceManager.js", "chunk_index": 3, "method": "loadFromLocalStorage"},
          {"file_name": "PersistenceManager.js", "chunk_index": 4, "method": "clearSavedState"}
        ]
      }
    },
    {
      "file_name": "PersistenceManager.js",
      "chunk_index": 1,
      "method": "constructor",
      "chunk_text": "    /**\n     * Creates a new PersistenceManager instance\n     * @param {GameStateManager} gameStateManager - Reference to the game's state manager\n     */\n    constructor(gameStateManager) {\n        this.gameStateManager = gameStateManager;\n    }",
      "metadata": {
        "start_line": 7,
        "end_line": 11,
        "notes": "Initializes persistence management system with game state context. Injects GameStateManager dependency for accessing and modifying game state data. Establishes foundation for state persistence operations.",
        "imports": [
          "GameStateManager"
        ],
        "tags": [
          "constructor",
          "persistence_manager",
          "game_state_manager",
          "initialization",
          "dependency_injection",
          "core_initialization",
          "state_management"
        ],
        "related_chunks": [
          {"file_name": "PersistenceManager.js", "chunk_index": 0, "method": "class_definition"},
          {"file_name": "PersistenceManager.js", "chunk_index": 2, "method": "saveToLocalStorage"},
          {"file_name": "PersistenceManager.js", "chunk_index": 3, "method": "loadFromLocalStorage"},
          {"file_name": "PersistenceManager.js", "chunk_index": 4, "method": "clearSavedState"}
        ]
      }
    },
    {
      "file_name": "PersistenceManager.js",
      "chunk_index": 2,
      "method": "saveToLocalStorage",
      "chunk_text": "    /**\n     * Saves current game state to localStorage\n     * Converts all registry values to a JSON string\n     */\n    saveToLocalStorage() {\n        const gameState = {};\n        const registry = this.gameStateManager.registry;\n        \n        // Extract all key-value pairs from the registry\n        registry.getAll().forEach(({ key, value }) => {\n            gameState[key] = value;\n        });\n\n        // Store the state as a JSON string in localStorage\n        localStorage.setItem('gameState', JSON.stringify(gameState));\n    }",
      "metadata": {
        "start_line": 13,
        "end_line": 28,
        "notes": "Implements game state serialization and storage to browser's localStorage. Extracts all key-value pairs from game registry, converts to JSON format, and persists data. Handles data transformation from runtime state to persistent storage format.",
        "imports": [
          "GameStateManager",
          "localStorage",
          "JSON",
          "GameStateManager.registry"
        ],
        "tags": [
          "save_to_local_storage",
          "game_state",
          "local_storage",
          "json",
          "data_serialization",
          "state_persistence",
          "data_transformation",
          "browser_storage"
        ],
        "related_chunks": [
          {"file_name": "PersistenceManager.js", "chunk_index": 0, "method": "class_definition"},
          {"file_name": "PersistenceManager.js", "chunk_index": 1, "method": "constructor"},
          {"file_name": "PersistenceManager.js", "chunk_index": 3, "method": "loadFromLocalStorage"}
        ]
      }
    },
    {
      "file_name": "PersistenceManager.js",
      "chunk_index": 3,
      "method": "loadFromLocalStorage",
      "chunk_text": "    /**\n     * Loads saved game state from localStorage\n     * @returns {boolean} True if state was loaded successfully, false if no saved state exists\n     */\n    loadFromLocalStorage() {\n        const savedState = localStorage.getItem('gameState');\n        if (savedState) {\n            // Parse and restore each saved value to the game state\n            const gameState = JSON.parse(savedState);\n            Object.entries(gameState).forEach(([key, value]) => {\n                this.gameStateManager.set(key, value);\n            });\n            return true;\n        }\n        return false;\n    }",
      "metadata": {
        "start_line": 30,
        "end_line": 52,
        "notes": "Retrieves and deserializes game state from browser's localStorage. Parses JSON data, restores values to game registry, and handles state restoration. Implements error handling and validation through boolean return value.",
        "imports": [
          "GameStateManager",
          "localStorage",
          "JSON",
          "GameStateManager.registry"
        ],
        "tags": [
          "load_from_local_storage",
          "game_state",
          "local_storage",
          "json",
          "data_deserialization",
          "state_restoration",
          "error_handling",
          "data_validation"
        ],
        "related_chunks": [
          {"file_name": "PersistenceManager.js", "chunk_index": 0, "method": "class_definition"},
          {"file_name": "PersistenceManager.js", "chunk_index": 1, "method": "constructor"},
          {"file_name": "PersistenceManager.js", "chunk_index": 2, "method": "saveToLocalStorage"}
        ]
      }
    },
    {
      "file_name": "PersistenceManager.js",
      "chunk_index": 4,
      "method": "clearSavedState",
      "chunk_text": "    /**\n     * Clears any saved game state from localStorage\n     * Used when resetting the game or starting fresh\n     */\n    clearSavedState() {\n        localStorage.removeItem('gameState');\n    }",
      "metadata": {
        "start_line": 54,
        "end_line": 59,
        "notes": "Implements game state cleanup by removing saved data from localStorage. Used during game resets or new game initialization. Provides clean slate for fresh game state.",
        "imports": [
          "localStorage",
          "GameStateManager"
        ],
        "tags": [
          "clear_saved_state",
          "local_storage",
          "game_state",
          "reset",
          "data_cleanup",
          "state_management",
          "game_initialization",
          "browser_storage"
        ],
        "related_chunks": [
          {"file_name": "PersistenceManager.js", "chunk_index": 0, "method": "class_definition"},
          {"file_name": "PersistenceManager.js", "chunk_index": 1, "method": "constructor"},
          {"file_name": "PersistenceManager.js", "chunk_index": 2, "method": "saveToLocalStorage"},
          {"file_name": "PersistenceManager.js", "chunk_index": 3, "method": "loadFromLocalStorage"}
        ]
      }
    }
]