[
    {
        "file_name": "ServiceContainer.js",
        "chunk_index": 0,
        "method": "imports",
        "chunk_text": "/**\n * Core imports for service container functionality\n * No external dependencies required as this is a foundational class\n */\n",
        "metadata": {
            "start_line": 1,
            "end_line": 4,
            "notes": "Core system imports for dependency injection and service management",
            "imports": [
                "Map",
                "TypeError",
                "Error"
            ],
            "tags": [
                "imports",
                "core_system",
                "service_management",
                "initialization"
            ],
            "related_chunks": [
                {"file_name": "ServiceContainer.js", "chunk_index": 1, "method": "classDefinition"},
                {"file_name": "ServiceContainer.js", "chunk_index": 2, "method": "constructor"}
            ]
        }
    },
    {
        "file_name": "ServiceContainer.js",
        "chunk_index": 1,
        "method": "classDefinition",
        "chunk_text": "/**\n * ServiceContainer.js\n * Implements a simple dependency injection container for managing game services.\n * Provides centralized access to game managers, systems, and shared resources.\n *\n * @class ServiceContainer\n * @description\n * A dependency injection container that:\n * - Stores game services and managers\n * - Provides type-safe access to services\n * - Manages service lifecycle and dependencies\n * - Supports singleton and transient services\n * - Enforces strict type checking on service keys\n *\n * @example\n * // Register a service\n * container.register('audio', new AudioManager());\n * \n * // Retrieve a service\n * const audio = container.get('audio');\n */\n\nexport class ServiceContainer {",
        "metadata": {
            "start_line": 6,
            "end_line": 26,
            "notes": "Core service container class for centralized game service management",
            "imports": [
                "Map",
                "TypeError"
            ],
            "tags": [
                "class_definition",
                "core_system",
                "dependency_injection",
                "service_management",
                "type_safety"
            ],
            "related_chunks": [
                {"file_name": "ServiceContainer.js", "chunk_index": 0, "method": "imports"},
                {"file_name": "ServiceContainer.js", "chunk_index": 2, "method": "constructor"}
            ]
        }
    },
    {
        "file_name": "ServiceContainer.js",
        "chunk_index": 2,
        "method": "constructor",
        "chunk_text": "    /**\n     * Initialize an empty service container\n     * Uses Map for efficient key-value storage of services\n     * \n     * @constructor\n     * @description\n     * Creates a new container instance with:\n     * - Empty service registry\n     * - Efficient Map-based storage\n     * - O(1) service lookup\n     * \n     * @returns {void}\n     */\n    constructor() {\n        this.services = new Map();\n    }",
        "metadata": {
            "start_line": 28,
            "end_line": 42,
            "notes": "Initialize service container with Map-based storage for O(1) lookups",
            "imports": [
                "Map"
            ],
            "tags": [
                "initialization",
                "core_system",
                "data_structure",
                "performance_optimization"
            ],
            "related_chunks": [
                {"file_name": "ServiceContainer.js", "chunk_index": 1, "method": "classDefinition"},
                {"file_name": "ServiceContainer.js", "chunk_index": 3, "method": "register"}
            ]
        }
    },
    {
        "file_name": "ServiceContainer.js",
        "chunk_index": 3,
        "method": "register",
        "chunk_text": "    /**\n     * Register a new service in the container\n     * @param {string} key - Unique identifier for the service\n     * @param {Object} service - Service instance to store\n     * \n     * @description\n     * Registers a service instance with the container:\n     * - Associates service with a unique key\n     * - Overwrites existing service if key exists\n     * - Supports any type of service object\n     * - Enforces strict type checking on inputs\n     * \n     * @example\n     * container.register('events', new EventManager());\n     * container.register('audio', audioManager);\n     * \n     * @returns {void}\n     * @throws {TypeError} If key is not a string\n     * @throws {TypeError} If service is null or undefined\n     */\n    register(key, service) {\n        if (typeof key !== 'string') {\n            throw new TypeError('Service key must be a string');\n        }\n        if (service === null || service === undefined) {\n            throw new TypeError('Service instance cannot be null or undefined');\n        }\n        this.services.set(key, service);\n    }",
        "metadata": {
            "start_line": 44,
            "end_line": 69,
            "notes": "Register service with type checking and validation",
            "imports": [
                "Map",
                "TypeError",
                "Object"
            ],
            "tags": [
                "service_registration",
                "type_safety",
                "error_handling",
                "core_system"
            ],
            "related_chunks": [
                {"file_name": "ServiceContainer.js", "chunk_index": 2, "method": "constructor"},
                {"file_name": "ServiceContainer.js", "chunk_index": 4, "method": "get"}
            ]
        }
    },
    {
        "file_name": "ServiceContainer.js",
        "chunk_index": 4,
        "method": "get",
        "chunk_text": "    /**\n     * Retrieve a service from the container\n     * @param {string} key - Identifier of the service to retrieve\n     * @returns {Object} The requested service instance\n     * \n     * @description\n     * Retrieves a previously registered service:\n     * - Looks up service by unique key\n     * - Returns the service instance if found\n     * - Throws error if service not registered\n     * - Enforces strict type checking on key\n     * \n     * @example\n     * const events = container.get('events');\n     * const audio = container.get('audio');\n     * \n     * @throws {TypeError} If key is not a string\n     * @throws {Error} If service is not found\n     */\n    get(key) {\n        if (typeof key !== 'string') {\n            throw new TypeError('Service key must be a string');\n        }\n        if (!this.services.has(key)) {\n            throw new Error(`Service ${key} not found in container`);\n        }\n        return this.services.get(key);\n    }",
        "metadata": {
            "start_line": 71,
            "end_line": 97,
            "notes": "Retrieve service with type checking and error handling",
            "imports": [
                "Map",
                "TypeError",
                "Error",
                "Object"
            ],
            "tags": [
                "service_retrieval",
                "type_safety",
                "error_handling",
                "core_system"
            ],
            "related_chunks": [
                {"file_name": "ServiceContainer.js", "chunk_index": 2, "method": "constructor"},
                {"file_name": "ServiceContainer.js", "chunk_index": 3, "method": "register"}
            ]
        }
    },
    {
        "file_name": "ServiceContainer.js",
        "chunk_index": 5,
        "method": "exportContainer",
        "chunk_text": "/**\n * Global singleton instance used throughout the game\n * \n * @description\n * A shared container instance that:\n * - Provides global access to game services\n * - Maintains singleton service instances\n * - Ensures consistent service access across scenes\n * - Enforces type safety on all operations\n * \n * @example\n * // In any file:\n * import { container } from './ServiceContainer';\n * const audio = container.get('audio');\n * \n * @type {ServiceContainer}\n */\nexport const container = new ServiceContainer();",
        "metadata": {
            "start_line": 99,
            "end_line": 116,
            "notes": "Export global singleton container for game-wide service access",
            "imports": [
                "ServiceContainer"
            ],
            "tags": [
                "singleton",
                "global_access",
                "core_system",
                "service_management"
            ],
            "related_chunks": [
                {"file_name": "ServiceContainer.js", "chunk_index": 1, "method": "classDefinition"},
                {"file_name": "ServiceContainer.js", "chunk_index": 4, "method": "get"}
            ]
        }
    }
]
