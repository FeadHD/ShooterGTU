[
  {
    "file_name": "EventManager.js",
    "chunk_index": 0,
    "method": "imports",
    "chunk_text": "import { EventEmitter } from 'events';\nimport { container } from './ServiceContainer';",
    "metadata": {
      "start_line": 1,
      "end_line": 2,
      "notes": "Imports core event handling and service container dependencies",
      "imports": [
        "events.EventEmitter",
        "ServiceContainer.container"
      ],
      "tags": [
        "imports",
        "core_system",
        "event_handling",
        "dependency_injection"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 1, "method": "classDefinition"},
        {"file_name": "EventManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 1,
    "method": "classDefinition",
    "chunk_text": "/**\n * EventManager.js\n * Centralized event management system for game-wide communication.\n * Extends Node's EventEmitter for robust event handling.\n *\n * @class EventManager\n * @extends EventEmitter\n * @description\n * Provides:\n * - Scene-specific event handling\n * - Global event bus capabilities\n * - Event lifecycle management\n * - Automatic event cleanup\n *\n * @requires EventEmitter\n * @requires ServiceContainer\n */\nexport class EventManager extends EventEmitter {",
    "metadata": {
      "start_line": 4,
      "end_line": 20,
      "notes": "Defines event manager class extending EventEmitter for game-wide event handling",
      "imports": [
        "events.EventEmitter",
        "ServiceContainer"
      ],
      "tags": [
        "class_definition",
        "core_system",
        "event_handling",
        "initialization"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 0, "method": "imports"},
        {"file_name": "EventManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 2,
    "method": "constructor",
    "chunk_text": "    /**\n     * Initialize event manager for a scene\n     * @param {Phaser.Scene} scene - Scene this manager belongs to\n     * \n     * @description\n     * Sets up:\n     * - Scene reference\n     * - Event tracking maps\n     * - Scene lifecycle hooks\n     * \n     * @requires Phaser.Scene\n     */\n    constructor(scene) {\n        super();\n        \n        // Store scene reference\n        this.scene = scene;\n        \n        // Track events by type\n        this.events = new Map();\n        \n        // Track event counts\n        this.eventCounts = new Map();\n        \n        // Bind scene shutdown\n        this.scene.events.on('shutdown', this.shutdown, this);\n    }",
    "metadata": {
      "start_line": 22,
      "end_line": 44,
      "notes": "Initializes event manager with scene reference and event tracking",
      "imports": [
        "Phaser.Scene",
        "Map"
      ],
      "tags": [
        "initialization",
        "core_system",
        "event_handling",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 1, "method": "classDefinition"},
        {"file_name": "EventManager.js", "chunk_index": 3, "method": "initialize"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 3,
    "method": "initialize",
    "chunk_text": "    /**\n     * Initialize the event manager\n     * Sets up initial event listeners and state\n     * \n     * @description\n     * - Registers with service container\n     * - Sets up scene event hooks\n     * - Initializes tracking state\n     */\n    initialize() {\n        console.log('Initializing EventManager...');\n        \n        // Register with container\n        if (!container.services.has('events')) {\n            container.register('events', this);\n        }\n        \n        // Clear any existing events\n        this.events.clear();\n        this.eventCounts.clear();\n        \n        console.log('EventManager initialized.');\n    }",
    "metadata": {
      "start_line": 46,
      "end_line": 66,
      "notes": "Initializes event system and registers with service container",
      "imports": [
        "ServiceContainer.container"
      ],
      "tags": [
        "initialization",
        "core_system",
        "event_handling",
        "service_registration"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 2, "method": "constructor"},
        {"file_name": "EventManager.js", "chunk_index": 4, "method": "on"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 4,
    "method": "on",
    "chunk_text": "    /**\n     * Register an event handler\n     * @param {string} eventName - Event identifier from GameEvents\n     * @param {Function} callback - Handler function\n     * \n     * @description\n     * Registers a persistent event handler that will:\n     * - Remain active until explicitly removed\n     * - Track the event in registeredEvents\n     * - Support multiple handlers per event\n     * \n     * @returns {void}\n     */\n    on(eventName, callback) {\n        if (!this.registeredEvents.has(eventName)) {\n            this.registeredEvents.add(eventName);\n        }\n        this.events.on(eventName, callback);\n    }",
    "metadata": {
      "start_line": 105,
      "end_line": 120,
      "notes": "Registers persistent event handler with tracking and multiple handler support",
      "imports": [
        "Map",
        "EventEmitter"
      ],
      "tags": [
        "core_system",
        "event_handling",
        "registration",
        "helper_method"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 3, "method": "initialize"},
        {"file_name": "EventManager.js", "chunk_index": 5, "method": "once"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 5,
    "method": "once",
    "chunk_text": "    /**\n     * Register a one-time event handler\n     * Automatically removed after first trigger\n     * @param {string} eventName - Event identifier from GameEvents\n     * @param {Function} callback - Handler function\n     * \n     * @description\n     * Registers a one-time event handler that will:\n     * - Execute only once\n     * - Auto-remove after triggering\n     * - Not be tracked in registeredEvents\n     * \n     * @returns {void}\n     */\n    once(eventName, callback) {\n        this.events.once(eventName, callback);\n    }",
    "metadata": {
      "start_line": 122,
      "end_line": 137,
      "notes": "Registers one-time event handler with automatic cleanup after execution",
      "imports": [
        "EventEmitter"
      ],
      "tags": [
        "core_system",
        "event_handling",
        "registration",
        "helper_method"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 4, "method": "on"},
        {"file_name": "EventManager.js", "chunk_index": 6, "method": "emit"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 6,
    "method": "emit",
    "chunk_text": "    /**\n     * Emit an event with data\n     * Automatically adds timestamp and scene info\n     * @param {string} eventName - Event identifier from GameEvents\n     * @param {Object} data - Event payload\n     * \n     * @description\n     * Emits an event with enhanced data that includes:\n     * - Original payload data\n     * - Current timestamp\n     * - Scene identifier (this.scene.scene.key)\n     * - Additional context information\n     * \n     * @property {number} eventData.timestamp - Unix timestamp of event emission\n     * @property {string} eventData.scene - Current scene key from this.scene.scene.key\n     * @returns {void} - This method doesn't return a value\n     */\n    emit(eventName, data = {}) {\n        const eventData = {\n            ...data,\n            timestamp: Date.now(),\n            scene: this.scene.scene.key\n        };\n        \n        this.events.emit(eventName, eventData);\n    }",
    "metadata": {
      "start_line": 139,
      "end_line": 160,
      "notes": "Emits event with enriched data including timestamp and scene context",
      "imports": [
        "EventEmitter",
        "Phaser.Scene"
      ],
      "tags": [
        "core_system",
        "event_handling",
        "data_enrichment",
        "helper_method"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 5, "method": "once"},
        {"file_name": "EventManager.js", "chunk_index": 7, "method": "off"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 7,
    "method": "off",
    "chunk_text": "    /**\n     * Remove a specific event handler\n     * @param {string} eventName - Event identifier from GameEvents\n     * @param {Function} callback - Handler to remove\n     * \n     * @description\n     * Removes a specific event handler while:\n     * - Maintaining other handlers for same event\n     * - Preserving event in registeredEvents\n     * - Not affecting one-time handlers\n     * \n     * @returns {void} - This method doesn't return a value\n     */\n    off(eventName, callback) {\n        this.events.off(eventName, callback);\n    }",
    "metadata": {
      "start_line": 162,
      "end_line": 175,
      "notes": "Removes specific event handler while preserving other handlers and registration state",
      "imports": [
        "EventEmitter"
      ],
      "tags": [
        "core_system",
        "event_handling",
        "cleanup",
        "helper_method"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 6, "method": "emit"},
        {"file_name": "EventManager.js", "chunk_index": 8, "method": "destroy"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 8,
    "method": "destroy",
    "chunk_text": "    /**\n     * Clean up all event handlers\n     * Called automatically when scene is destroyed\n     * \n     * @description\n     * Performs complete cleanup by:\n     * - Removing all event handlers\n     * - Clearing registered events tracking\n     * - Preparing for garbage collection\n     * \n     * @returns {void} - This method doesn't return a value\n     */\n    destroy() {\n        this.registeredEvents.forEach(eventName => {\n            this.removeAllListeners(eventName);\n        });\n        this.registeredEvents.clear();\n    }",
    "metadata": {
      "start_line": 192,
      "end_line": 206,
      "notes": "Performs complete cleanup of all event handlers and registration state",
      "imports": [
        "EventEmitter",
        "Map"
      ],
      "tags": [
        "core_system",
        "event_handling",
        "cleanup",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 7, "method": "removeAllListeners"},
        {"file_name": "EventManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  },
  {
    "file_name": "EventManager.js",
    "chunk_index": 9,
    "method": "shutdown",
    "chunk_text": "    /**\n     * Handle scene shutdown\n     * Called automatically by scene lifecycle\n     * \n     * @description\n     * Performs cleanup when scene shuts down:\n     * - Removes all event handlers\n     * - Clears registration state\n     * - Preserves instance for scene restart\n     * \n     * @returns {void} - This method doesn't return a value\n     */\n    shutdown() {\n        this.destroy();\n    }",
    "metadata": {
      "start_line": 208,
      "end_line": 220,
      "notes": "Handles scene shutdown cleanup while preserving instance for restart",
      "imports": [
        "Phaser.Scene",
        "EventEmitter"
      ],
      "tags": [
        "core_system",
        "event_handling",
        "cleanup",
        "lifecycle"
      ],
      "related_chunks": [
        {"file_name": "EventManager.js", "chunk_index": 8, "method": "destroy"},
        {"file_name": "EventManager.js", "chunk_index": 2, "method": "constructor"}
      ]
    }
  }
]
