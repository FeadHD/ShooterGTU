{
    "chunks": [
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 0,
        "method": "file_header",
        "chunk_text": "/**\n * CollisionManager.js\n * Centralized collision handling system for game physics\n * Manages player, enemy, bullet, and environment interactions\n * Handles damage calculations, effects, and event dispatching\n */",
        "metadata": {
          "start_line": 1,
          "end_line": 6,
          "notes": "Core collision management system that orchestrates all physics interactions in the game. Handles complex collision logic between players, enemies, bullets, and environment.",
          "imports": [
            "Phaser.Physics.Arcade",
            "Phaser.Scene",
            "Phaser.GameObjects.GameObject",
            "Phaser.Physics.Arcade.Collider"
          ],
          "tags": [
            "collision",
            "physics",
            "game_manager",
            "phaser3",
            "core_system",
            "physics_management"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 2, "method": "setupCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 3, "method": "setupEnemyCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 4, "method": "setupBulletCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 6, "method": "setupPlayerCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 9, "method": "setupTileCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 1,
        "method": "constructor",
        "chunk_text": "    constructor(scene) {\n        // Store the scene reference for accessing game objects (e.g. enemies, bullets, player, etc.)\n        this.scene = scene;\n        \n        // Keep track of which Zappers we've set up collisions for\n        this._processedZappers = new Set();\n        \n        // Add update event to continuously check for new enemies\n        this.scene.events.on('update', this.checkNewEnemies, this);\n    }",
        "metadata": {
          "start_line": 8,
          "end_line": 17,
          "notes": "Initializes the collision manager with scene reference and sets up dynamic enemy tracking system. Establishes event listeners for continuous enemy collision updates.",
          "imports": [
            "Phaser.Scene",
            "Phaser.Events.EventEmitter",
            "Phaser.Physics.Arcade.World"
          ],
          "tags": [
            "constructor",
            "initialization",
            "phaser3",
            "event_handling",
            "enemy_tracking",
            "physics_setup"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 8, "method": "checkNewEnemies" },
            { "file_name": "CollisionManager.js", "chunk_index": 2, "method": "setupCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 2,
        "method": "setupCollisions",
        "chunk_text": "    /**\n     * ============================\n     * MASTER COLLISION SETUP\n     * ============================\n     * Main entry point to set up collisions in this scene.\n     * Calls sub-methods for tile, enemy, bullet, and player collisions.\n     */\n    setupCollisions() {\n        this.setupTileCollisions();\n        this.setupEnemyCollisions();\n        this.setupBulletCollisions();\n        this.setupPlayerCollisions();\n    }",
        "metadata": {
          "start_line": 19,
          "end_line": 31,
          "notes": "Main orchestrator method that initializes all collision systems in the proper order. Ensures all game objects have their physics interactions properly configured.",
          "imports": [
            "Phaser.Physics.Arcade.World",
            "Phaser.Physics.Arcade.Collider"
          ],
          "tags": [
            "collision_setup",
            "initialization",
            "phaser3",
            "physics",
            "master_method"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 3, "method": "setupEnemyCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 4, "method": "setupBulletCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 6, "method": "setupPlayerCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 9, "method": "setupTileCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 3,
        "method": "setupEnemyCollisions",
        "chunk_text": "    /**\n     * ============================\n     * ENEMY COLLISIONS\n     * ============================\n     * Sets up collisions involving enemy objects.\n     */\n    setupEnemyCollisions() {\n        if (this.scene.mapLayer) {\n            if (this.scene.drones) {\n                this.scene.physics.add.collider(this.scene.drones, this.scene.mapLayer);\n                this.scene.physics.add.collider(this.scene.drones, this.scene.platforms);\n            }\n            if (this.scene.enemies) {\n                this.scene.physics.add.collider(this.scene.enemies, this.scene.groundLayer);\n                this.scene.physics.add.collider(this.scene.enemies, this.scene.platformLayer);\n            }\n        }\n    }",
        "metadata": {
          "start_line": 33,
          "end_line": 53,
          "notes": "Configures collision detection between enemy game objects and environmental layers. Handles both drones and standard enemies separately.",
          "imports": [
            "Phaser.Physics.Arcade.Collider",
            "Phaser.Physics.Arcade.StaticGroup",
            "Phaser.Physics.Arcade.Group",
            "Phaser.Tilemaps.TilemapLayer"
          ],
          "tags": [
            "enemy_collisions",
            "physics",
            "phaser3",
            "environment_collision",
            "tile_collision"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 2, "method": "setupCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 4,
        "method": "setupBulletCollisions",
        "chunk_text": "    /**\n     * ============================\n     * BULLET COLLISIONS\n     * ============================\n     * Sets up overlap/collision checks involving bullets vs. enemies, platforms, etc.\n     */\n    setupBulletCollisions() {\n        if (!this.scene.bullets && !this.scene.managers.bullets?.getGroup()) return;\n        const bulletGroup = this.scene.bullets || this.scene.managers.bullets.getGroup();\n        if (!bulletGroup) return;\n\n        // Bullet vs. Enemies overlap\n        if (this.scene.enemies) {\n            this.scene.physics.add.overlap(\n                bulletGroup,\n                this.scene.enemies,\n                (bullet, enemySprite) => {\n                    if (this.scene.enemyManager) {\n                        this.scene.enemyManager.handleBulletHit(bullet, enemySprite);\n                    }\n                },\n                null,\n                this\n            );\n        }\n\n        // Bullet collisions with platforms\n        if (this.scene.platforms) {\n            this.scene.physics.add.collider(\n                bulletGroup,\n                this.scene.platforms,\n                this.handleBulletCollision,\n                null,\n                this\n            );\n        }\n\n        // Overlaps with drones\n        if (this.scene.drones) {\n            this.scene.physics.add.overlap(\n                bulletGroup,\n                this.scene.drones,\n                (bullet, enemySprite) => {\n                    if (this.scene.enemyManager) {\n                        this.scene.enemyManager.handleBulletHit(bullet, enemySprite);\n                    }\n                },\n                null,\n                this\n            );\n        }\n\n        // Overlaps with meleeWarriors\n        if (this.scene.meleeWarriors) {\n            this.scene.physics.add.overlap(\n                bulletGroup,\n                this.scene.meleeWarriors,\n                (bullet, enemySprite) => {\n                    if (this.scene.enemyManager) {\n                        this.scene.enemyManager.handleBulletHit(bullet, enemySprite);\n                    }\n                },\n                null,\n                this\n            );\n        }\n    }",
        "metadata": {
          "start_line": 55,
          "end_line": 127,
          "notes": "Sets up all bullet-related collision and overlap detection. Handles interactions between bullets and various game objects including enemies, platforms, and special enemy types.",
          "imports": [
            "Phaser.Physics.Arcade.Collider",
            "Phaser.Physics.Arcade.Group",
            "Phaser.Physics.Arcade.Sprite",
            "Phaser.Physics.Arcade.StaticGroup",
            "Phaser.GameObjects.GameObject"
          ],
          "tags": [
            "bullet_collisions",
            "physics",
            "phaser3",
            "overlap_detection",
            "collision_handling",
            "enemy_interaction"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 2, "method": "setupCollisions" },
            { "file_name": "CollisionManager.js", "chunk_index": 5, "method": "hitEnemyWithBullet" },
            { "file_name": "CollisionManager.js", "chunk_index": 10, "method": "handleBulletCollision" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 5,
        "method": "hitEnemyWithBullet",
        "chunk_text": "    /**\n     * Example method for bullet vs. enemy overlap logic.\n     * Can be called instead of an arrow function for clarity.\n     */\n    hitEnemyWithBullet(bullet, enemySprite) {\n        if (this.scene.enemies) {\n            this.scene.enemies.handleBulletHit(bullet, enemySprite);\n        }\n    }",
        "metadata": {
          "start_line": 129,
          "end_line": 137,
          "notes": "Handles collision logic between bullets and enemies. Called when bullet overlaps with enemy sprite.",
          "imports": [
            "Phaser.Physics.Arcade.Sprite",
            "Phaser.GameObjects.GameObject"
          ],
          "tags": [
            "bullet_hit",
            "enemy_hit",
            "phaser3",
            "collision_handler",
            "damage_system"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 4, "method": "setupBulletCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 6,
        "method": "setupPlayerCollisions",
        "chunk_text": "    /**\n     * ============================\n     * PLAYER COLLISIONS\n     * ============================\n     * Sets up overlap/collision checks for player vs. enemies, layers, ramps, etc.\n     */\n    setupPlayerCollisions() {\n        if (!this.scene.player) return;\n        if (this.scene.groundLayer) {\n            this.scene.physics.add.collider(this.scene.player, this.scene.groundLayer);\n        }\n        if (this.scene.platformLayer) {\n            this.scene.physics.add.collider(this.scene.player, this.scene.platformLayer);\n        }\n        if (this.scene.mapLayer) {\n            this.scene.physics.add.collider(this.scene.player, this.scene.mapLayer);\n        }\n        if (this.scene.platforms) {\n            this.scene.physics.add.collider(this.scene.player, this.scene.platforms);\n        }\n        if (this.scene.ramp) {\n            this.scene.physics.add.collider(this.scene.player, this.scene.ramp);\n        }\n        if (this.scene.enemies) {\n            this.scene.physics.add.overlap(\n                this.scene.player,\n                this.scene.enemies,\n                (player, enemy) => {\n                    if (!player.isInvulnerable) {\n                        if (enemy.isAttacking) {\n                            player.takeDamage(enemy.damage);\n                        } else {\n                            player.takeDamage(10);\n                        }\n                    }\n                },\n                null,\n                this\n            );\n        }\n    }",
        "metadata": {
          "start_line": 139,
          "end_line": 178,
          "notes": "Sets up all player-related collisions including environment, platforms, and enemy interactions. Handles damage system when player collides with enemies.",
          "imports": [
            "Phaser.Physics.Arcade.Collider",
            "Phaser.Physics.Arcade.Sprite",
            "Phaser.Tilemaps.TilemapLayer",
            "Phaser.Physics.Arcade.StaticGroup",
            "Phaser.GameObjects.GameObject"
          ],
          "tags": [
            "player_collisions",
            "physics",
            "phaser3",
            "damage_system",
            "environment_collision",
            "enemy_interaction"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 2, "method": "setupCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 7,
        "method": "handlePlayerEnemyOverlap",
        "chunk_text": "    /**\n     * ============================\n     * handlePlayerEnemyOverlap\n     * ============================\n     * Called when the player overlaps with an enemy (e.g., drones).\n     * Calculates and applies damage based on enemy properties.\n     */\n    handlePlayerEnemyOverlap(player, enemy) {\n        if (player.isDying) return;\n        const damage = enemy.enemy ? enemy.enemy.damageAmount : 25;\n        player.takeDamage(damage);\n    }",
        "metadata": {
          "start_line": 197,
          "end_line": 216,
          "notes": "Handles damage calculation and application when player collides with an enemy. Checks enemy properties for damage amount.",
          "imports": [
            "Phaser.Physics.Arcade.Sprite",
            "Phaser.GameObjects.GameObject",
            "Phaser.Physics.Arcade.Body"
          ],
          "tags": [
            "player_damage",
            "enemy_collision",
            "phaser3",
            "collision_handler",
            "damage_system"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 6, "method": "setupPlayerCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 8,
        "method": "checkNewEnemies",
        "chunk_text": "    /**\n     * Check for new enemies and set up their collisions\n     * Called on scene update\n     */\n    checkNewEnemies() {\n        if (this.scene.zappers) {\n            this.scene.zappers.forEach(zapper => {\n                if (!this._processedZappers.has(zapper)) {\n                    this.scene.physics.add.overlap(\n                        this.scene.player,\n                        zapper,\n                        (player) => {\n                            if (!player.isInvulnerable) {\n                                player.takeDamage(20);\n                            }\n                        }\n                    );\n                    this._processedZappers.add(zapper);\n                }\n            });\n        }\n    }",
        "metadata": {
          "start_line": 180,
          "end_line": 201,
          "notes": "Dynamically checks and sets up collisions for new enemy types (zappers). Called every frame via scene update.",
          "imports": [
            "Phaser.Physics.Arcade.Sprite",
            "Phaser.Physics.Arcade.Collider",
            "Phaser.GameObjects.GameObject"
          ],
          "tags": [
            "enemy_tracking",
            "collision_setup",
            "phaser3",
            "physics",
            "dynamic_collision"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 1, "method": "constructor" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 9,
        "method": "setupTileCollisions",
        "chunk_text": "    /**\n     * Set up tile-based collisions\n     * Configures collision properties for tilemap layers\n     */\n    setupTileCollisions() {\n        if (this.scene.groundLayer) {\n            this.scene.groundLayer.setCollisionByProperty({ collides: true });\n        }\n        if (this.scene.platformLayer) {\n            this.scene.platformLayer.setCollisionByProperty({ collides: true });\n        }\n    }",
        "metadata": {
          "start_line": 203,
          "end_line": 214,
          "notes": "Configures collision properties for tilemap layers. Sets up which tiles should have collision based on their properties.",
          "imports": [
            "Phaser.Tilemaps.TilemapLayer",
            "Phaser.Tilemaps.Tile"
          ],
          "tags": [
            "tile_collision",
            "physics",
            "phaser3",
            "environment_setup",
            "tilemap"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 2, "method": "setupCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 10,
        "method": "handleBulletCollision",
        "chunk_text": "    /**\n     * Handle bullet collision with static objects\n     * @param {Bullet} bullet - The bullet that collided\n     */\n    handleBulletCollision(bullet) {\n        if (this.scene.managers.bullets) {\n            this.scene.managers.bullets.destroyBullet(bullet);\n        }\n    }",
        "metadata": {
          "start_line": 216,
          "end_line": 224,
          "notes": "Handles bullet collisions with static objects. Triggers bullet destruction through bullet manager.",
          "imports": [
            "Phaser.Physics.Arcade.Sprite",
            "Phaser.GameObjects.GameObject"
          ],
          "tags": [
            "bullet_collision",
            "physics",
            "phaser3",
            "collision_handler",
            "object_cleanup"
          ],
          "related_chunks": [
            { "file_name": "CollisionManager.js", "chunk_index": 4, "method": "setupBulletCollisions" }
          ]
        }
      },
      {
        "file_name": "CollisionManager.js",
        "chunk_index": 11,
        "method": "handleEnemyCollision",
        "chunk_text": "    /**\n     * Called when two enemies collide with each other (e.g., drones).\n     * Reverses direction or bounces them off one another.\n     */\n    handleEnemyCollision(enemy1, enemy2) {\n        if ((enemy1.body.velocity.x > 0 && enemy2.body.velocity.x < 0) ||\n            (enemy1.body.velocity.x < 0 && enemy2.body.velocity.x > 0)) {\n            if (enemy1.enemy) {\n                enemy1.enemy.reverseDirection();\n                enemy1.setVelocityY(-150);\n            }\n            if (enemy2.enemy) {\n                enemy2.enemy.reverseDirection();\n                enemy2.setVelocityY(-150);\n            }\n        }\n        const pushForce = 100;\n        if (enemy1.x < enemy2.x) {\n            enemy1.setVelocityX(-pushForce);\n            enemy2.setVelocityX(pushForce);\n        } else {\n            enemy1.setVelocityX(pushForce);\n            enemy2.setVelocityX(-pushForce);\n        }\n    }",
        "metadata": {
          "start_line": 300,
          "end_line": 332,
          "notes": "Handles collisions between two enemy entities by reversing their direction and applying a push force.",
          "imports": [],
          "tags": ["enemy_collision", "physics", "phaser3"],
          "related_chunks": []
        }
      }
    ]
  }