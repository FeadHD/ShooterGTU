[
    {
      "file_name": "BulletManager.js",
      "chunk_index": 0,
      "method": "class_definition",
      "chunk_text": "/**\n * BulletManager.js\n * Manages bullet creation, pooling, and lifecycle\n * Handles bullet physics and collision detection\n */\n\nimport { Bullet } from '../../prefabs/Bullet';\n\nclass BulletManager {",
      "metadata": {
        "start_line": 1,
        "end_line": 5,
        "notes": "Class definition for managing bullet lifecycle and physics. Responsible for bullet pooling, creation, and physics interactions.",
        "imports": [
          "../../prefabs/Bullet",
          "Phaser.Physics.Arcade.Group",
          "Phaser.Scene",
          "Phaser.GameObjects.GameObject"
        ],
        "tags": [
          "class_definition",
          "bullet_manager",
          "phaser3",
          "physics",
          "object_pooling",
          "game_management"
        ],
        "related_chunks": [
          {"file_name": "BulletManager.js", "chunk_index": 1, "method": "constructor"},
          {"file_name": "BulletManager.js", "chunk_index": 2, "method": "#createBulletGroup"}
        ]
      }
    },
    {
      "file_name": "BulletManager.js",
      "chunk_index": 1,
      "method": "constructor",
      "chunk_text": "    constructor(scene) {\n        if (!scene) {\n            throw new Error('Scene is required to initialize BulletManager.');\n        }\n        this.scene = scene;\n\n        this.#createBulletGroup();\n    }",
      "metadata": {
        "start_line": 7,
        "end_line": 15,
        "notes": "Constructor initializes the BulletManager with scene reference and sets up bullet pooling system. Validates scene parameter and creates the physics group for bullet management.",
        "imports": ["Phaser.Scene"],
        "tags": [
          "constructor",
          "bullet_pooling",
          "phaser3",
          "initialization",
          "error_handling",
          "physics_setup"
        ],
        "related_chunks": [
          {"file_name": "BulletManager.js", "chunk_index": 2, "method": "#createBulletGroup"}
        ]
      }
    },
    {
      "file_name": "BulletManager.js",
      "chunk_index": 2,
      "method": "#createBulletGroup",
      "chunk_text": "    /**\n     * Create physics group for bullet pooling\n     * Sets up bullet behavior and constraints\n     * @private\n     */\n    #createBulletGroup() {\n        this.bullets = this.scene.physics.add.group({\n            classType: Bullet,\n            maxSize: -1,               // Unlimited bullets\n            runChildUpdate: true,\n            allowGravity: false,\n            immovable: true\n        });\n    }",
      "metadata": {
        "start_line": 17,
        "end_line": 30,
        "notes": "Private method that initializes the physics group for bullet pooling. Configures bullet physics properties including gravity and immovability. Essential for bullet lifecycle management.",
        "imports": [
          "Phaser.Physics.Arcade.Group",
          "Phaser.Physics.Arcade.Factory"
        ],
        "tags": [
          "private_method",
          "bullet_pooling",
          "phaser3",
          "physics",
          "object_pooling",
          "configuration"
        ],
        "related_chunks": [
          {"file_name": "BulletManager.js", "chunk_index": 4, "method": "createBullet"},
          {"file_name": "BulletManager.js", "chunk_index": 5, "method": "getGroup"}
        ]
      }
    },
    {
      "file_name": "BulletManager.js",
      "chunk_index": 3,
      "method": "destroyBullet",
      "chunk_text": "    /**\n     * Deactivate and hide bullet\n     * Called when bullet hits target or leaves screen\n     * @param {Bullet} bullet - Bullet to destroy\n     */\n    destroyBullet(bullet) {\n        bullet.setActive(false);\n        bullet.setVisible(false);\n        bullet.body.enable = false;\n    }",
      "metadata": {
        "start_line": 32,
        "end_line": 41,
        "notes": "Handles bullet deactivation and recycling. Properly disables physics body and visibility for pool recycling.",
        "imports": [
          "Phaser.Physics.Arcade.Body",
          "Phaser.GameObjects.GameObject"
        ],
        "tags": [
          "bullet_lifecycle",
          "destroy_bullet",
          "phaser3",
          "object_pooling",
          "physics",
          "resource_management"
        ],
        "related_chunks": [
          {"file_name": "BulletManager.js", "chunk_index": 4, "method": "createBullet"}
        ]
      }
    },
    {
      "file_name": "BulletManager.js",
      "chunk_index": 4,
      "method": "createBullet",
      "chunk_text": "    /**\n     * Create new bullet from pool\n     * Sets initial position and velocity\n     * @returns {Bullet|null} Created bullet or null if pool full\n     */\n    createBullet(x, y, velocityX) {\n        const bullet = this.bullets.get(x, y);\n        if (bullet) {\n            bullet.setActive(true)\n                 .setVisible(true)\n                 .setVelocityX(velocityX);\n        }\n        return bullet;\n    }",
      "metadata": {
        "start_line": 43,
        "end_line": 56,
        "notes": "Creates and initializes bullets from the object pool. Sets position, visibility, and velocity. Returns null if pool is exhausted.",
        "imports": [
          "Phaser.Physics.Arcade.Group",
          "Phaser.GameObjects.GameObject",
          "Phaser.Physics.Arcade.Body"
        ],
        "tags": [
          "bullet_creation",
          "bullet_pooling",
          "phaser3",
          "physics",
          "object_initialization",
          "resource_management"
        ],
        "related_chunks": [
          {"file_name": "BulletManager.js", "chunk_index": 2, "method": "#createBulletGroup"},
          {"file_name": "BulletManager.js", "chunk_index": 3, "method": "destroyBullet"}
        ]
      }
    },
    {
      "file_name": "BulletManager.js",
      "chunk_index": 5,
      "method": "getGroup",
      "chunk_text": "    /**\n     * Get bullet physics group\n     * Used by collision manager for detection\n     * @returns {Phaser.Physics.Arcade.Group} Bullet group\n     */\n    getGroup() {\n        return this.bullets;\n    }",
      "metadata": {
        "start_line": 58,
        "end_line": 65,
        "notes": "Accessor method for the bullet physics group. Provides encapsulated access to the bullet pool.",
        "imports": ["Phaser.Physics.Arcade.Group"],
        "tags": [
          "bullet_group",
          "phaser3",
          "physics",
          "accessor",
          "encapsulation"
        ],
        "related_chunks": [
          {"file_name": "BulletManager.js", "chunk_index": 2, "method": "#createBulletGroup"}
        ]
      }
    }
]